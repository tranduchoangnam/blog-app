
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = {
  id: string
  order: number
  email: string | null
  photo: string | null
  name: string
  bio: string | null
}

/**
 * Model Blog
 * 
 */
export type Blog = {
  id: number
  title: string
  content: string
  tags: string[]
  photo: string
  date: Date
  upvoted: boolean
  downvoted: boolean
  userId: string
}

/**
 * Model Upvote
 * 
 */
export type Upvote = {
  userId: string
  blogId: number
}

/**
 * Model Downvote
 * 
 */
export type Downvote = {
  userId: string
  blogId: number
}

/**
 * Model Share
 * 
 */
export type Share = {
  userId: string
  blogId: number
}

/**
 * Model Comment
 * 
 */
export type Comment = {
  id: number
  content: string
  date: Date
  liked: boolean
  like_count: number
  userId: string
  blogId: number
}

/**
 * Model History
 * 
 */
export type History = {
  date: Date
  userId: string
  blogId: number
}

/**
 * Model Follow
 * 
 */
export type Follow = {
  followerId: string
  followingId: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.blog`: Exposes CRUD operations for the **Blog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Blogs
    * const blogs = await prisma.blog.findMany()
    * ```
    */
  get blog(): Prisma.BlogDelegate<GlobalReject>;

  /**
   * `prisma.upvote`: Exposes CRUD operations for the **Upvote** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Upvotes
    * const upvotes = await prisma.upvote.findMany()
    * ```
    */
  get upvote(): Prisma.UpvoteDelegate<GlobalReject>;

  /**
   * `prisma.downvote`: Exposes CRUD operations for the **Downvote** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Downvotes
    * const downvotes = await prisma.downvote.findMany()
    * ```
    */
  get downvote(): Prisma.DownvoteDelegate<GlobalReject>;

  /**
   * `prisma.share`: Exposes CRUD operations for the **Share** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Shares
    * const shares = await prisma.share.findMany()
    * ```
    */
  get share(): Prisma.ShareDelegate<GlobalReject>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<GlobalReject>;

  /**
   * `prisma.history`: Exposes CRUD operations for the **History** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Histories
    * const histories = await prisma.history.findMany()
    * ```
    */
  get history(): Prisma.HistoryDelegate<GlobalReject>;

  /**
   * `prisma.follow`: Exposes CRUD operations for the **Follow** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Follows
    * const follows = await prisma.follow.findMany()
    * ```
    */
  get follow(): Prisma.FollowDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.13.0
   * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Blog: 'Blog',
    Upvote: 'Upvote',
    Downvote: 'Downvote',
    Share: 'Share',
    Comment: 'Comment',
    History: 'History',
    Follow: 'Follow'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    blog: number
    history: number
    comment: number
    upvote: number
    downvote: number
    share: number
    followedBy: number
    following: number
  }

  export type UserCountOutputTypeSelect = {
    blog?: boolean | UserCountOutputTypeCountBlogArgs
    history?: boolean | UserCountOutputTypeCountHistoryArgs
    comment?: boolean | UserCountOutputTypeCountCommentArgs
    upvote?: boolean | UserCountOutputTypeCountUpvoteArgs
    downvote?: boolean | UserCountOutputTypeCountDownvoteArgs
    share?: boolean | UserCountOutputTypeCountShareArgs
    followedBy?: boolean | UserCountOutputTypeCountFollowedByArgs
    following?: boolean | UserCountOutputTypeCountFollowingArgs
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBlogArgs = {
    where?: BlogWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountHistoryArgs = {
    where?: HistoryWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommentArgs = {
    where?: CommentWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpvoteArgs = {
    where?: UpvoteWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDownvoteArgs = {
    where?: DownvoteWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountShareArgs = {
    where?: ShareWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFollowedByArgs = {
    where?: FollowWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFollowingArgs = {
    where?: FollowWhereInput
  }



  /**
   * Count Type BlogCountOutputType
   */


  export type BlogCountOutputType = {
    upvote: number
    downvote: number
    share: number
    comment: number
    history: number
  }

  export type BlogCountOutputTypeSelect = {
    upvote?: boolean | BlogCountOutputTypeCountUpvoteArgs
    downvote?: boolean | BlogCountOutputTypeCountDownvoteArgs
    share?: boolean | BlogCountOutputTypeCountShareArgs
    comment?: boolean | BlogCountOutputTypeCountCommentArgs
    history?: boolean | BlogCountOutputTypeCountHistoryArgs
  }

  export type BlogCountOutputTypeGetPayload<S extends boolean | null | undefined | BlogCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? BlogCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (BlogCountOutputTypeArgs)
    ? BlogCountOutputType 
    : S extends { select: any } & (BlogCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof BlogCountOutputType ? BlogCountOutputType[P] : never
  } 
      : BlogCountOutputType




  // Custom InputTypes

  /**
   * BlogCountOutputType without action
   */
  export type BlogCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the BlogCountOutputType
     */
    select?: BlogCountOutputTypeSelect | null
  }


  /**
   * BlogCountOutputType without action
   */
  export type BlogCountOutputTypeCountUpvoteArgs = {
    where?: UpvoteWhereInput
  }


  /**
   * BlogCountOutputType without action
   */
  export type BlogCountOutputTypeCountDownvoteArgs = {
    where?: DownvoteWhereInput
  }


  /**
   * BlogCountOutputType without action
   */
  export type BlogCountOutputTypeCountShareArgs = {
    where?: ShareWhereInput
  }


  /**
   * BlogCountOutputType without action
   */
  export type BlogCountOutputTypeCountCommentArgs = {
    where?: CommentWhereInput
  }


  /**
   * BlogCountOutputType without action
   */
  export type BlogCountOutputTypeCountHistoryArgs = {
    where?: HistoryWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    order: number | null
  }

  export type UserSumAggregateOutputType = {
    order: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    order: number | null
    email: string | null
    photo: string | null
    name: string | null
    bio: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    order: number | null
    email: string | null
    photo: string | null
    name: string | null
    bio: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    order: number
    email: number
    photo: number
    name: number
    bio: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    order?: true
  }

  export type UserSumAggregateInputType = {
    order?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    order?: true
    email?: true
    photo?: true
    name?: true
    bio?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    order?: true
    email?: true
    photo?: true
    name?: true
    bio?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    order?: true
    email?: true
    photo?: true
    name?: true
    bio?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    order: number
    email: string | null
    photo: string | null
    name: string
    bio: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    order?: boolean
    email?: boolean
    photo?: boolean
    name?: boolean
    bio?: boolean
    blog?: boolean | User$blogArgs
    history?: boolean | User$historyArgs
    comment?: boolean | User$commentArgs
    upvote?: boolean | User$upvoteArgs
    downvote?: boolean | User$downvoteArgs
    share?: boolean | User$shareArgs
    followedBy?: boolean | User$followedByArgs
    following?: boolean | User$followingArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    blog?: boolean | User$blogArgs
    history?: boolean | User$historyArgs
    comment?: boolean | User$commentArgs
    upvote?: boolean | User$upvoteArgs
    downvote?: boolean | User$downvoteArgs
    share?: boolean | User$shareArgs
    followedBy?: boolean | User$followedByArgs
    following?: boolean | User$followingArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'blog' ? Array < BlogGetPayload<S['include'][P]>>  :
        P extends 'history' ? Array < HistoryGetPayload<S['include'][P]>>  :
        P extends 'comment' ? Array < CommentGetPayload<S['include'][P]>>  :
        P extends 'upvote' ? Array < UpvoteGetPayload<S['include'][P]>>  :
        P extends 'downvote' ? Array < DownvoteGetPayload<S['include'][P]>>  :
        P extends 'share' ? Array < ShareGetPayload<S['include'][P]>>  :
        P extends 'followedBy' ? Array < FollowGetPayload<S['include'][P]>>  :
        P extends 'following' ? Array < FollowGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'blog' ? Array < BlogGetPayload<S['select'][P]>>  :
        P extends 'history' ? Array < HistoryGetPayload<S['select'][P]>>  :
        P extends 'comment' ? Array < CommentGetPayload<S['select'][P]>>  :
        P extends 'upvote' ? Array < UpvoteGetPayload<S['select'][P]>>  :
        P extends 'downvote' ? Array < DownvoteGetPayload<S['select'][P]>>  :
        P extends 'share' ? Array < ShareGetPayload<S['select'][P]>>  :
        P extends 'followedBy' ? Array < FollowGetPayload<S['select'][P]>>  :
        P extends 'following' ? Array < FollowGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    blog<T extends User$blogArgs= {}>(args?: Subset<T, User$blogArgs>): Prisma.PrismaPromise<Array<BlogGetPayload<T>>| Null>;

    history<T extends User$historyArgs= {}>(args?: Subset<T, User$historyArgs>): Prisma.PrismaPromise<Array<HistoryGetPayload<T>>| Null>;

    comment<T extends User$commentArgs= {}>(args?: Subset<T, User$commentArgs>): Prisma.PrismaPromise<Array<CommentGetPayload<T>>| Null>;

    upvote<T extends User$upvoteArgs= {}>(args?: Subset<T, User$upvoteArgs>): Prisma.PrismaPromise<Array<UpvoteGetPayload<T>>| Null>;

    downvote<T extends User$downvoteArgs= {}>(args?: Subset<T, User$downvoteArgs>): Prisma.PrismaPromise<Array<DownvoteGetPayload<T>>| Null>;

    share<T extends User$shareArgs= {}>(args?: Subset<T, User$shareArgs>): Prisma.PrismaPromise<Array<ShareGetPayload<T>>| Null>;

    followedBy<T extends User$followedByArgs= {}>(args?: Subset<T, User$followedByArgs>): Prisma.PrismaPromise<Array<FollowGetPayload<T>>| Null>;

    following<T extends User$followingArgs= {}>(args?: Subset<T, User$followingArgs>): Prisma.PrismaPromise<Array<FollowGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.blog
   */
  export type User$blogArgs = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogInclude | null
    where?: BlogWhereInput
    orderBy?: Enumerable<BlogOrderByWithRelationInput>
    cursor?: BlogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<BlogScalarFieldEnum>
  }


  /**
   * User.history
   */
  export type User$historyArgs = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude | null
    where?: HistoryWhereInput
    orderBy?: Enumerable<HistoryOrderByWithRelationInput>
    cursor?: HistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<HistoryScalarFieldEnum>
  }


  /**
   * User.comment
   */
  export type User$commentArgs = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude | null
    where?: CommentWhereInput
    orderBy?: Enumerable<CommentOrderByWithRelationInput>
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CommentScalarFieldEnum>
  }


  /**
   * User.upvote
   */
  export type User$upvoteArgs = {
    /**
     * Select specific fields to fetch from the Upvote
     */
    select?: UpvoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UpvoteInclude | null
    where?: UpvoteWhereInput
    orderBy?: Enumerable<UpvoteOrderByWithRelationInput>
    cursor?: UpvoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UpvoteScalarFieldEnum>
  }


  /**
   * User.downvote
   */
  export type User$downvoteArgs = {
    /**
     * Select specific fields to fetch from the Downvote
     */
    select?: DownvoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DownvoteInclude | null
    where?: DownvoteWhereInput
    orderBy?: Enumerable<DownvoteOrderByWithRelationInput>
    cursor?: DownvoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DownvoteScalarFieldEnum>
  }


  /**
   * User.share
   */
  export type User$shareArgs = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShareInclude | null
    where?: ShareWhereInput
    orderBy?: Enumerable<ShareOrderByWithRelationInput>
    cursor?: ShareWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ShareScalarFieldEnum>
  }


  /**
   * User.followedBy
   */
  export type User$followedByArgs = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowInclude | null
    where?: FollowWhereInput
    orderBy?: Enumerable<FollowOrderByWithRelationInput>
    cursor?: FollowWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FollowScalarFieldEnum>
  }


  /**
   * User.following
   */
  export type User$followingArgs = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowInclude | null
    where?: FollowWhereInput
    orderBy?: Enumerable<FollowOrderByWithRelationInput>
    cursor?: FollowWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FollowScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model Blog
   */


  export type AggregateBlog = {
    _count: BlogCountAggregateOutputType | null
    _avg: BlogAvgAggregateOutputType | null
    _sum: BlogSumAggregateOutputType | null
    _min: BlogMinAggregateOutputType | null
    _max: BlogMaxAggregateOutputType | null
  }

  export type BlogAvgAggregateOutputType = {
    id: number | null
  }

  export type BlogSumAggregateOutputType = {
    id: number | null
  }

  export type BlogMinAggregateOutputType = {
    id: number | null
    title: string | null
    content: string | null
    photo: string | null
    date: Date | null
    upvoted: boolean | null
    downvoted: boolean | null
    userId: string | null
  }

  export type BlogMaxAggregateOutputType = {
    id: number | null
    title: string | null
    content: string | null
    photo: string | null
    date: Date | null
    upvoted: boolean | null
    downvoted: boolean | null
    userId: string | null
  }

  export type BlogCountAggregateOutputType = {
    id: number
    title: number
    content: number
    tags: number
    photo: number
    date: number
    upvoted: number
    downvoted: number
    userId: number
    _all: number
  }


  export type BlogAvgAggregateInputType = {
    id?: true
  }

  export type BlogSumAggregateInputType = {
    id?: true
  }

  export type BlogMinAggregateInputType = {
    id?: true
    title?: true
    content?: true
    photo?: true
    date?: true
    upvoted?: true
    downvoted?: true
    userId?: true
  }

  export type BlogMaxAggregateInputType = {
    id?: true
    title?: true
    content?: true
    photo?: true
    date?: true
    upvoted?: true
    downvoted?: true
    userId?: true
  }

  export type BlogCountAggregateInputType = {
    id?: true
    title?: true
    content?: true
    tags?: true
    photo?: true
    date?: true
    upvoted?: true
    downvoted?: true
    userId?: true
    _all?: true
  }

  export type BlogAggregateArgs = {
    /**
     * Filter which Blog to aggregate.
     */
    where?: BlogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Blogs to fetch.
     */
    orderBy?: Enumerable<BlogOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BlogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Blogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Blogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Blogs
    **/
    _count?: true | BlogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BlogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BlogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BlogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BlogMaxAggregateInputType
  }

  export type GetBlogAggregateType<T extends BlogAggregateArgs> = {
        [P in keyof T & keyof AggregateBlog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBlog[P]>
      : GetScalarType<T[P], AggregateBlog[P]>
  }




  export type BlogGroupByArgs = {
    where?: BlogWhereInput
    orderBy?: Enumerable<BlogOrderByWithAggregationInput>
    by: BlogScalarFieldEnum[]
    having?: BlogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BlogCountAggregateInputType | true
    _avg?: BlogAvgAggregateInputType
    _sum?: BlogSumAggregateInputType
    _min?: BlogMinAggregateInputType
    _max?: BlogMaxAggregateInputType
  }


  export type BlogGroupByOutputType = {
    id: number
    title: string
    content: string
    tags: string[]
    photo: string
    date: Date
    upvoted: boolean
    downvoted: boolean
    userId: string
    _count: BlogCountAggregateOutputType | null
    _avg: BlogAvgAggregateOutputType | null
    _sum: BlogSumAggregateOutputType | null
    _min: BlogMinAggregateOutputType | null
    _max: BlogMaxAggregateOutputType | null
  }

  type GetBlogGroupByPayload<T extends BlogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<BlogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BlogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BlogGroupByOutputType[P]>
            : GetScalarType<T[P], BlogGroupByOutputType[P]>
        }
      >
    >


  export type BlogSelect = {
    id?: boolean
    title?: boolean
    content?: boolean
    tags?: boolean
    photo?: boolean
    date?: boolean
    upvoted?: boolean
    downvoted?: boolean
    userId?: boolean
    user?: boolean | UserArgs
    upvote?: boolean | Blog$upvoteArgs
    downvote?: boolean | Blog$downvoteArgs
    share?: boolean | Blog$shareArgs
    comment?: boolean | Blog$commentArgs
    history?: boolean | Blog$historyArgs
    _count?: boolean | BlogCountOutputTypeArgs
  }


  export type BlogInclude = {
    user?: boolean | UserArgs
    upvote?: boolean | Blog$upvoteArgs
    downvote?: boolean | Blog$downvoteArgs
    share?: boolean | Blog$shareArgs
    comment?: boolean | Blog$commentArgs
    history?: boolean | Blog$historyArgs
    _count?: boolean | BlogCountOutputTypeArgs
  }

  export type BlogGetPayload<S extends boolean | null | undefined | BlogArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Blog :
    S extends undefined ? never :
    S extends { include: any } & (BlogArgs | BlogFindManyArgs)
    ? Blog  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'upvote' ? Array < UpvoteGetPayload<S['include'][P]>>  :
        P extends 'downvote' ? Array < DownvoteGetPayload<S['include'][P]>>  :
        P extends 'share' ? Array < ShareGetPayload<S['include'][P]>>  :
        P extends 'comment' ? Array < CommentGetPayload<S['include'][P]>>  :
        P extends 'history' ? Array < HistoryGetPayload<S['include'][P]>>  :
        P extends '_count' ? BlogCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (BlogArgs | BlogFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'upvote' ? Array < UpvoteGetPayload<S['select'][P]>>  :
        P extends 'downvote' ? Array < DownvoteGetPayload<S['select'][P]>>  :
        P extends 'share' ? Array < ShareGetPayload<S['select'][P]>>  :
        P extends 'comment' ? Array < CommentGetPayload<S['select'][P]>>  :
        P extends 'history' ? Array < HistoryGetPayload<S['select'][P]>>  :
        P extends '_count' ? BlogCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Blog ? Blog[P] : never
  } 
      : Blog


  type BlogCountArgs = 
    Omit<BlogFindManyArgs, 'select' | 'include'> & {
      select?: BlogCountAggregateInputType | true
    }

  export interface BlogDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Blog that matches the filter.
     * @param {BlogFindUniqueArgs} args - Arguments to find a Blog
     * @example
     * // Get one Blog
     * const blog = await prisma.blog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BlogFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BlogFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Blog'> extends True ? Prisma__BlogClient<BlogGetPayload<T>> : Prisma__BlogClient<BlogGetPayload<T> | null, null>

    /**
     * Find one Blog that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BlogFindUniqueOrThrowArgs} args - Arguments to find a Blog
     * @example
     * // Get one Blog
     * const blog = await prisma.blog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BlogFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, BlogFindUniqueOrThrowArgs>
    ): Prisma__BlogClient<BlogGetPayload<T>>

    /**
     * Find the first Blog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogFindFirstArgs} args - Arguments to find a Blog
     * @example
     * // Get one Blog
     * const blog = await prisma.blog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BlogFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BlogFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Blog'> extends True ? Prisma__BlogClient<BlogGetPayload<T>> : Prisma__BlogClient<BlogGetPayload<T> | null, null>

    /**
     * Find the first Blog that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogFindFirstOrThrowArgs} args - Arguments to find a Blog
     * @example
     * // Get one Blog
     * const blog = await prisma.blog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BlogFindFirstOrThrowArgs>(
      args?: SelectSubset<T, BlogFindFirstOrThrowArgs>
    ): Prisma__BlogClient<BlogGetPayload<T>>

    /**
     * Find zero or more Blogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Blogs
     * const blogs = await prisma.blog.findMany()
     * 
     * // Get first 10 Blogs
     * const blogs = await prisma.blog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const blogWithIdOnly = await prisma.blog.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BlogFindManyArgs>(
      args?: SelectSubset<T, BlogFindManyArgs>
    ): Prisma.PrismaPromise<Array<BlogGetPayload<T>>>

    /**
     * Create a Blog.
     * @param {BlogCreateArgs} args - Arguments to create a Blog.
     * @example
     * // Create one Blog
     * const Blog = await prisma.blog.create({
     *   data: {
     *     // ... data to create a Blog
     *   }
     * })
     * 
    **/
    create<T extends BlogCreateArgs>(
      args: SelectSubset<T, BlogCreateArgs>
    ): Prisma__BlogClient<BlogGetPayload<T>>

    /**
     * Create many Blogs.
     *     @param {BlogCreateManyArgs} args - Arguments to create many Blogs.
     *     @example
     *     // Create many Blogs
     *     const blog = await prisma.blog.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BlogCreateManyArgs>(
      args?: SelectSubset<T, BlogCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Blog.
     * @param {BlogDeleteArgs} args - Arguments to delete one Blog.
     * @example
     * // Delete one Blog
     * const Blog = await prisma.blog.delete({
     *   where: {
     *     // ... filter to delete one Blog
     *   }
     * })
     * 
    **/
    delete<T extends BlogDeleteArgs>(
      args: SelectSubset<T, BlogDeleteArgs>
    ): Prisma__BlogClient<BlogGetPayload<T>>

    /**
     * Update one Blog.
     * @param {BlogUpdateArgs} args - Arguments to update one Blog.
     * @example
     * // Update one Blog
     * const blog = await prisma.blog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BlogUpdateArgs>(
      args: SelectSubset<T, BlogUpdateArgs>
    ): Prisma__BlogClient<BlogGetPayload<T>>

    /**
     * Delete zero or more Blogs.
     * @param {BlogDeleteManyArgs} args - Arguments to filter Blogs to delete.
     * @example
     * // Delete a few Blogs
     * const { count } = await prisma.blog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BlogDeleteManyArgs>(
      args?: SelectSubset<T, BlogDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Blogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Blogs
     * const blog = await prisma.blog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BlogUpdateManyArgs>(
      args: SelectSubset<T, BlogUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Blog.
     * @param {BlogUpsertArgs} args - Arguments to update or create a Blog.
     * @example
     * // Update or create a Blog
     * const blog = await prisma.blog.upsert({
     *   create: {
     *     // ... data to create a Blog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Blog we want to update
     *   }
     * })
    **/
    upsert<T extends BlogUpsertArgs>(
      args: SelectSubset<T, BlogUpsertArgs>
    ): Prisma__BlogClient<BlogGetPayload<T>>

    /**
     * Count the number of Blogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogCountArgs} args - Arguments to filter Blogs to count.
     * @example
     * // Count the number of Blogs
     * const count = await prisma.blog.count({
     *   where: {
     *     // ... the filter for the Blogs we want to count
     *   }
     * })
    **/
    count<T extends BlogCountArgs>(
      args?: Subset<T, BlogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BlogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Blog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BlogAggregateArgs>(args: Subset<T, BlogAggregateArgs>): Prisma.PrismaPromise<GetBlogAggregateType<T>>

    /**
     * Group by Blog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BlogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BlogGroupByArgs['orderBy'] }
        : { orderBy?: BlogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BlogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBlogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Blog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BlogClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    upvote<T extends Blog$upvoteArgs= {}>(args?: Subset<T, Blog$upvoteArgs>): Prisma.PrismaPromise<Array<UpvoteGetPayload<T>>| Null>;

    downvote<T extends Blog$downvoteArgs= {}>(args?: Subset<T, Blog$downvoteArgs>): Prisma.PrismaPromise<Array<DownvoteGetPayload<T>>| Null>;

    share<T extends Blog$shareArgs= {}>(args?: Subset<T, Blog$shareArgs>): Prisma.PrismaPromise<Array<ShareGetPayload<T>>| Null>;

    comment<T extends Blog$commentArgs= {}>(args?: Subset<T, Blog$commentArgs>): Prisma.PrismaPromise<Array<CommentGetPayload<T>>| Null>;

    history<T extends Blog$historyArgs= {}>(args?: Subset<T, Blog$historyArgs>): Prisma.PrismaPromise<Array<HistoryGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Blog base type for findUnique actions
   */
  export type BlogFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogInclude | null
    /**
     * Filter, which Blog to fetch.
     */
    where: BlogWhereUniqueInput
  }

  /**
   * Blog findUnique
   */
  export interface BlogFindUniqueArgs extends BlogFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Blog findUniqueOrThrow
   */
  export type BlogFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogInclude | null
    /**
     * Filter, which Blog to fetch.
     */
    where: BlogWhereUniqueInput
  }


  /**
   * Blog base type for findFirst actions
   */
  export type BlogFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogInclude | null
    /**
     * Filter, which Blog to fetch.
     */
    where?: BlogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Blogs to fetch.
     */
    orderBy?: Enumerable<BlogOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Blogs.
     */
    cursor?: BlogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Blogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Blogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Blogs.
     */
    distinct?: Enumerable<BlogScalarFieldEnum>
  }

  /**
   * Blog findFirst
   */
  export interface BlogFindFirstArgs extends BlogFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Blog findFirstOrThrow
   */
  export type BlogFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogInclude | null
    /**
     * Filter, which Blog to fetch.
     */
    where?: BlogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Blogs to fetch.
     */
    orderBy?: Enumerable<BlogOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Blogs.
     */
    cursor?: BlogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Blogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Blogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Blogs.
     */
    distinct?: Enumerable<BlogScalarFieldEnum>
  }


  /**
   * Blog findMany
   */
  export type BlogFindManyArgs = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogInclude | null
    /**
     * Filter, which Blogs to fetch.
     */
    where?: BlogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Blogs to fetch.
     */
    orderBy?: Enumerable<BlogOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Blogs.
     */
    cursor?: BlogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Blogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Blogs.
     */
    skip?: number
    distinct?: Enumerable<BlogScalarFieldEnum>
  }


  /**
   * Blog create
   */
  export type BlogCreateArgs = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogInclude | null
    /**
     * The data needed to create a Blog.
     */
    data: XOR<BlogCreateInput, BlogUncheckedCreateInput>
  }


  /**
   * Blog createMany
   */
  export type BlogCreateManyArgs = {
    /**
     * The data used to create many Blogs.
     */
    data: Enumerable<BlogCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Blog update
   */
  export type BlogUpdateArgs = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogInclude | null
    /**
     * The data needed to update a Blog.
     */
    data: XOR<BlogUpdateInput, BlogUncheckedUpdateInput>
    /**
     * Choose, which Blog to update.
     */
    where: BlogWhereUniqueInput
  }


  /**
   * Blog updateMany
   */
  export type BlogUpdateManyArgs = {
    /**
     * The data used to update Blogs.
     */
    data: XOR<BlogUpdateManyMutationInput, BlogUncheckedUpdateManyInput>
    /**
     * Filter which Blogs to update
     */
    where?: BlogWhereInput
  }


  /**
   * Blog upsert
   */
  export type BlogUpsertArgs = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogInclude | null
    /**
     * The filter to search for the Blog to update in case it exists.
     */
    where: BlogWhereUniqueInput
    /**
     * In case the Blog found by the `where` argument doesn't exist, create a new Blog with this data.
     */
    create: XOR<BlogCreateInput, BlogUncheckedCreateInput>
    /**
     * In case the Blog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BlogUpdateInput, BlogUncheckedUpdateInput>
  }


  /**
   * Blog delete
   */
  export type BlogDeleteArgs = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogInclude | null
    /**
     * Filter which Blog to delete.
     */
    where: BlogWhereUniqueInput
  }


  /**
   * Blog deleteMany
   */
  export type BlogDeleteManyArgs = {
    /**
     * Filter which Blogs to delete
     */
    where?: BlogWhereInput
  }


  /**
   * Blog.upvote
   */
  export type Blog$upvoteArgs = {
    /**
     * Select specific fields to fetch from the Upvote
     */
    select?: UpvoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UpvoteInclude | null
    where?: UpvoteWhereInput
    orderBy?: Enumerable<UpvoteOrderByWithRelationInput>
    cursor?: UpvoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UpvoteScalarFieldEnum>
  }


  /**
   * Blog.downvote
   */
  export type Blog$downvoteArgs = {
    /**
     * Select specific fields to fetch from the Downvote
     */
    select?: DownvoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DownvoteInclude | null
    where?: DownvoteWhereInput
    orderBy?: Enumerable<DownvoteOrderByWithRelationInput>
    cursor?: DownvoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DownvoteScalarFieldEnum>
  }


  /**
   * Blog.share
   */
  export type Blog$shareArgs = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShareInclude | null
    where?: ShareWhereInput
    orderBy?: Enumerable<ShareOrderByWithRelationInput>
    cursor?: ShareWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ShareScalarFieldEnum>
  }


  /**
   * Blog.comment
   */
  export type Blog$commentArgs = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude | null
    where?: CommentWhereInput
    orderBy?: Enumerable<CommentOrderByWithRelationInput>
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CommentScalarFieldEnum>
  }


  /**
   * Blog.history
   */
  export type Blog$historyArgs = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude | null
    where?: HistoryWhereInput
    orderBy?: Enumerable<HistoryOrderByWithRelationInput>
    cursor?: HistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<HistoryScalarFieldEnum>
  }


  /**
   * Blog without action
   */
  export type BlogArgs = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlogInclude | null
  }



  /**
   * Model Upvote
   */


  export type AggregateUpvote = {
    _count: UpvoteCountAggregateOutputType | null
    _avg: UpvoteAvgAggregateOutputType | null
    _sum: UpvoteSumAggregateOutputType | null
    _min: UpvoteMinAggregateOutputType | null
    _max: UpvoteMaxAggregateOutputType | null
  }

  export type UpvoteAvgAggregateOutputType = {
    blogId: number | null
  }

  export type UpvoteSumAggregateOutputType = {
    blogId: number | null
  }

  export type UpvoteMinAggregateOutputType = {
    userId: string | null
    blogId: number | null
  }

  export type UpvoteMaxAggregateOutputType = {
    userId: string | null
    blogId: number | null
  }

  export type UpvoteCountAggregateOutputType = {
    userId: number
    blogId: number
    _all: number
  }


  export type UpvoteAvgAggregateInputType = {
    blogId?: true
  }

  export type UpvoteSumAggregateInputType = {
    blogId?: true
  }

  export type UpvoteMinAggregateInputType = {
    userId?: true
    blogId?: true
  }

  export type UpvoteMaxAggregateInputType = {
    userId?: true
    blogId?: true
  }

  export type UpvoteCountAggregateInputType = {
    userId?: true
    blogId?: true
    _all?: true
  }

  export type UpvoteAggregateArgs = {
    /**
     * Filter which Upvote to aggregate.
     */
    where?: UpvoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Upvotes to fetch.
     */
    orderBy?: Enumerable<UpvoteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UpvoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Upvotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Upvotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Upvotes
    **/
    _count?: true | UpvoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UpvoteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UpvoteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UpvoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UpvoteMaxAggregateInputType
  }

  export type GetUpvoteAggregateType<T extends UpvoteAggregateArgs> = {
        [P in keyof T & keyof AggregateUpvote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUpvote[P]>
      : GetScalarType<T[P], AggregateUpvote[P]>
  }




  export type UpvoteGroupByArgs = {
    where?: UpvoteWhereInput
    orderBy?: Enumerable<UpvoteOrderByWithAggregationInput>
    by: UpvoteScalarFieldEnum[]
    having?: UpvoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UpvoteCountAggregateInputType | true
    _avg?: UpvoteAvgAggregateInputType
    _sum?: UpvoteSumAggregateInputType
    _min?: UpvoteMinAggregateInputType
    _max?: UpvoteMaxAggregateInputType
  }


  export type UpvoteGroupByOutputType = {
    userId: string
    blogId: number
    _count: UpvoteCountAggregateOutputType | null
    _avg: UpvoteAvgAggregateOutputType | null
    _sum: UpvoteSumAggregateOutputType | null
    _min: UpvoteMinAggregateOutputType | null
    _max: UpvoteMaxAggregateOutputType | null
  }

  type GetUpvoteGroupByPayload<T extends UpvoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UpvoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UpvoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UpvoteGroupByOutputType[P]>
            : GetScalarType<T[P], UpvoteGroupByOutputType[P]>
        }
      >
    >


  export type UpvoteSelect = {
    userId?: boolean
    blogId?: boolean
    user?: boolean | UserArgs
    blog?: boolean | BlogArgs
  }


  export type UpvoteInclude = {
    user?: boolean | UserArgs
    blog?: boolean | BlogArgs
  }

  export type UpvoteGetPayload<S extends boolean | null | undefined | UpvoteArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Upvote :
    S extends undefined ? never :
    S extends { include: any } & (UpvoteArgs | UpvoteFindManyArgs)
    ? Upvote  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'blog' ? BlogGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UpvoteArgs | UpvoteFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'blog' ? BlogGetPayload<S['select'][P]> :  P extends keyof Upvote ? Upvote[P] : never
  } 
      : Upvote


  type UpvoteCountArgs = 
    Omit<UpvoteFindManyArgs, 'select' | 'include'> & {
      select?: UpvoteCountAggregateInputType | true
    }

  export interface UpvoteDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Upvote that matches the filter.
     * @param {UpvoteFindUniqueArgs} args - Arguments to find a Upvote
     * @example
     * // Get one Upvote
     * const upvote = await prisma.upvote.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UpvoteFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UpvoteFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Upvote'> extends True ? Prisma__UpvoteClient<UpvoteGetPayload<T>> : Prisma__UpvoteClient<UpvoteGetPayload<T> | null, null>

    /**
     * Find one Upvote that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UpvoteFindUniqueOrThrowArgs} args - Arguments to find a Upvote
     * @example
     * // Get one Upvote
     * const upvote = await prisma.upvote.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UpvoteFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UpvoteFindUniqueOrThrowArgs>
    ): Prisma__UpvoteClient<UpvoteGetPayload<T>>

    /**
     * Find the first Upvote that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UpvoteFindFirstArgs} args - Arguments to find a Upvote
     * @example
     * // Get one Upvote
     * const upvote = await prisma.upvote.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UpvoteFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UpvoteFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Upvote'> extends True ? Prisma__UpvoteClient<UpvoteGetPayload<T>> : Prisma__UpvoteClient<UpvoteGetPayload<T> | null, null>

    /**
     * Find the first Upvote that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UpvoteFindFirstOrThrowArgs} args - Arguments to find a Upvote
     * @example
     * // Get one Upvote
     * const upvote = await prisma.upvote.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UpvoteFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UpvoteFindFirstOrThrowArgs>
    ): Prisma__UpvoteClient<UpvoteGetPayload<T>>

    /**
     * Find zero or more Upvotes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UpvoteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Upvotes
     * const upvotes = await prisma.upvote.findMany()
     * 
     * // Get first 10 Upvotes
     * const upvotes = await prisma.upvote.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const upvoteWithUserIdOnly = await prisma.upvote.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends UpvoteFindManyArgs>(
      args?: SelectSubset<T, UpvoteFindManyArgs>
    ): Prisma.PrismaPromise<Array<UpvoteGetPayload<T>>>

    /**
     * Create a Upvote.
     * @param {UpvoteCreateArgs} args - Arguments to create a Upvote.
     * @example
     * // Create one Upvote
     * const Upvote = await prisma.upvote.create({
     *   data: {
     *     // ... data to create a Upvote
     *   }
     * })
     * 
    **/
    create<T extends UpvoteCreateArgs>(
      args: SelectSubset<T, UpvoteCreateArgs>
    ): Prisma__UpvoteClient<UpvoteGetPayload<T>>

    /**
     * Create many Upvotes.
     *     @param {UpvoteCreateManyArgs} args - Arguments to create many Upvotes.
     *     @example
     *     // Create many Upvotes
     *     const upvote = await prisma.upvote.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UpvoteCreateManyArgs>(
      args?: SelectSubset<T, UpvoteCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Upvote.
     * @param {UpvoteDeleteArgs} args - Arguments to delete one Upvote.
     * @example
     * // Delete one Upvote
     * const Upvote = await prisma.upvote.delete({
     *   where: {
     *     // ... filter to delete one Upvote
     *   }
     * })
     * 
    **/
    delete<T extends UpvoteDeleteArgs>(
      args: SelectSubset<T, UpvoteDeleteArgs>
    ): Prisma__UpvoteClient<UpvoteGetPayload<T>>

    /**
     * Update one Upvote.
     * @param {UpvoteUpdateArgs} args - Arguments to update one Upvote.
     * @example
     * // Update one Upvote
     * const upvote = await prisma.upvote.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UpvoteUpdateArgs>(
      args: SelectSubset<T, UpvoteUpdateArgs>
    ): Prisma__UpvoteClient<UpvoteGetPayload<T>>

    /**
     * Delete zero or more Upvotes.
     * @param {UpvoteDeleteManyArgs} args - Arguments to filter Upvotes to delete.
     * @example
     * // Delete a few Upvotes
     * const { count } = await prisma.upvote.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UpvoteDeleteManyArgs>(
      args?: SelectSubset<T, UpvoteDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Upvotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UpvoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Upvotes
     * const upvote = await prisma.upvote.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UpvoteUpdateManyArgs>(
      args: SelectSubset<T, UpvoteUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Upvote.
     * @param {UpvoteUpsertArgs} args - Arguments to update or create a Upvote.
     * @example
     * // Update or create a Upvote
     * const upvote = await prisma.upvote.upsert({
     *   create: {
     *     // ... data to create a Upvote
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Upvote we want to update
     *   }
     * })
    **/
    upsert<T extends UpvoteUpsertArgs>(
      args: SelectSubset<T, UpvoteUpsertArgs>
    ): Prisma__UpvoteClient<UpvoteGetPayload<T>>

    /**
     * Count the number of Upvotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UpvoteCountArgs} args - Arguments to filter Upvotes to count.
     * @example
     * // Count the number of Upvotes
     * const count = await prisma.upvote.count({
     *   where: {
     *     // ... the filter for the Upvotes we want to count
     *   }
     * })
    **/
    count<T extends UpvoteCountArgs>(
      args?: Subset<T, UpvoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UpvoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Upvote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UpvoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UpvoteAggregateArgs>(args: Subset<T, UpvoteAggregateArgs>): Prisma.PrismaPromise<GetUpvoteAggregateType<T>>

    /**
     * Group by Upvote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UpvoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UpvoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UpvoteGroupByArgs['orderBy'] }
        : { orderBy?: UpvoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UpvoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUpvoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Upvote.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UpvoteClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    blog<T extends BlogArgs= {}>(args?: Subset<T, BlogArgs>): Prisma__BlogClient<BlogGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Upvote base type for findUnique actions
   */
  export type UpvoteFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Upvote
     */
    select?: UpvoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UpvoteInclude | null
    /**
     * Filter, which Upvote to fetch.
     */
    where: UpvoteWhereUniqueInput
  }

  /**
   * Upvote findUnique
   */
  export interface UpvoteFindUniqueArgs extends UpvoteFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Upvote findUniqueOrThrow
   */
  export type UpvoteFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Upvote
     */
    select?: UpvoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UpvoteInclude | null
    /**
     * Filter, which Upvote to fetch.
     */
    where: UpvoteWhereUniqueInput
  }


  /**
   * Upvote base type for findFirst actions
   */
  export type UpvoteFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Upvote
     */
    select?: UpvoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UpvoteInclude | null
    /**
     * Filter, which Upvote to fetch.
     */
    where?: UpvoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Upvotes to fetch.
     */
    orderBy?: Enumerable<UpvoteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Upvotes.
     */
    cursor?: UpvoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Upvotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Upvotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Upvotes.
     */
    distinct?: Enumerable<UpvoteScalarFieldEnum>
  }

  /**
   * Upvote findFirst
   */
  export interface UpvoteFindFirstArgs extends UpvoteFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Upvote findFirstOrThrow
   */
  export type UpvoteFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Upvote
     */
    select?: UpvoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UpvoteInclude | null
    /**
     * Filter, which Upvote to fetch.
     */
    where?: UpvoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Upvotes to fetch.
     */
    orderBy?: Enumerable<UpvoteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Upvotes.
     */
    cursor?: UpvoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Upvotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Upvotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Upvotes.
     */
    distinct?: Enumerable<UpvoteScalarFieldEnum>
  }


  /**
   * Upvote findMany
   */
  export type UpvoteFindManyArgs = {
    /**
     * Select specific fields to fetch from the Upvote
     */
    select?: UpvoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UpvoteInclude | null
    /**
     * Filter, which Upvotes to fetch.
     */
    where?: UpvoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Upvotes to fetch.
     */
    orderBy?: Enumerable<UpvoteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Upvotes.
     */
    cursor?: UpvoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Upvotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Upvotes.
     */
    skip?: number
    distinct?: Enumerable<UpvoteScalarFieldEnum>
  }


  /**
   * Upvote create
   */
  export type UpvoteCreateArgs = {
    /**
     * Select specific fields to fetch from the Upvote
     */
    select?: UpvoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UpvoteInclude | null
    /**
     * The data needed to create a Upvote.
     */
    data: XOR<UpvoteCreateInput, UpvoteUncheckedCreateInput>
  }


  /**
   * Upvote createMany
   */
  export type UpvoteCreateManyArgs = {
    /**
     * The data used to create many Upvotes.
     */
    data: Enumerable<UpvoteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Upvote update
   */
  export type UpvoteUpdateArgs = {
    /**
     * Select specific fields to fetch from the Upvote
     */
    select?: UpvoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UpvoteInclude | null
    /**
     * The data needed to update a Upvote.
     */
    data: XOR<UpvoteUpdateInput, UpvoteUncheckedUpdateInput>
    /**
     * Choose, which Upvote to update.
     */
    where: UpvoteWhereUniqueInput
  }


  /**
   * Upvote updateMany
   */
  export type UpvoteUpdateManyArgs = {
    /**
     * The data used to update Upvotes.
     */
    data: XOR<UpvoteUpdateManyMutationInput, UpvoteUncheckedUpdateManyInput>
    /**
     * Filter which Upvotes to update
     */
    where?: UpvoteWhereInput
  }


  /**
   * Upvote upsert
   */
  export type UpvoteUpsertArgs = {
    /**
     * Select specific fields to fetch from the Upvote
     */
    select?: UpvoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UpvoteInclude | null
    /**
     * The filter to search for the Upvote to update in case it exists.
     */
    where: UpvoteWhereUniqueInput
    /**
     * In case the Upvote found by the `where` argument doesn't exist, create a new Upvote with this data.
     */
    create: XOR<UpvoteCreateInput, UpvoteUncheckedCreateInput>
    /**
     * In case the Upvote was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UpvoteUpdateInput, UpvoteUncheckedUpdateInput>
  }


  /**
   * Upvote delete
   */
  export type UpvoteDeleteArgs = {
    /**
     * Select specific fields to fetch from the Upvote
     */
    select?: UpvoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UpvoteInclude | null
    /**
     * Filter which Upvote to delete.
     */
    where: UpvoteWhereUniqueInput
  }


  /**
   * Upvote deleteMany
   */
  export type UpvoteDeleteManyArgs = {
    /**
     * Filter which Upvotes to delete
     */
    where?: UpvoteWhereInput
  }


  /**
   * Upvote without action
   */
  export type UpvoteArgs = {
    /**
     * Select specific fields to fetch from the Upvote
     */
    select?: UpvoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UpvoteInclude | null
  }



  /**
   * Model Downvote
   */


  export type AggregateDownvote = {
    _count: DownvoteCountAggregateOutputType | null
    _avg: DownvoteAvgAggregateOutputType | null
    _sum: DownvoteSumAggregateOutputType | null
    _min: DownvoteMinAggregateOutputType | null
    _max: DownvoteMaxAggregateOutputType | null
  }

  export type DownvoteAvgAggregateOutputType = {
    blogId: number | null
  }

  export type DownvoteSumAggregateOutputType = {
    blogId: number | null
  }

  export type DownvoteMinAggregateOutputType = {
    userId: string | null
    blogId: number | null
  }

  export type DownvoteMaxAggregateOutputType = {
    userId: string | null
    blogId: number | null
  }

  export type DownvoteCountAggregateOutputType = {
    userId: number
    blogId: number
    _all: number
  }


  export type DownvoteAvgAggregateInputType = {
    blogId?: true
  }

  export type DownvoteSumAggregateInputType = {
    blogId?: true
  }

  export type DownvoteMinAggregateInputType = {
    userId?: true
    blogId?: true
  }

  export type DownvoteMaxAggregateInputType = {
    userId?: true
    blogId?: true
  }

  export type DownvoteCountAggregateInputType = {
    userId?: true
    blogId?: true
    _all?: true
  }

  export type DownvoteAggregateArgs = {
    /**
     * Filter which Downvote to aggregate.
     */
    where?: DownvoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Downvotes to fetch.
     */
    orderBy?: Enumerable<DownvoteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DownvoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Downvotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Downvotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Downvotes
    **/
    _count?: true | DownvoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DownvoteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DownvoteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DownvoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DownvoteMaxAggregateInputType
  }

  export type GetDownvoteAggregateType<T extends DownvoteAggregateArgs> = {
        [P in keyof T & keyof AggregateDownvote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDownvote[P]>
      : GetScalarType<T[P], AggregateDownvote[P]>
  }




  export type DownvoteGroupByArgs = {
    where?: DownvoteWhereInput
    orderBy?: Enumerable<DownvoteOrderByWithAggregationInput>
    by: DownvoteScalarFieldEnum[]
    having?: DownvoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DownvoteCountAggregateInputType | true
    _avg?: DownvoteAvgAggregateInputType
    _sum?: DownvoteSumAggregateInputType
    _min?: DownvoteMinAggregateInputType
    _max?: DownvoteMaxAggregateInputType
  }


  export type DownvoteGroupByOutputType = {
    userId: string
    blogId: number
    _count: DownvoteCountAggregateOutputType | null
    _avg: DownvoteAvgAggregateOutputType | null
    _sum: DownvoteSumAggregateOutputType | null
    _min: DownvoteMinAggregateOutputType | null
    _max: DownvoteMaxAggregateOutputType | null
  }

  type GetDownvoteGroupByPayload<T extends DownvoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<DownvoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DownvoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DownvoteGroupByOutputType[P]>
            : GetScalarType<T[P], DownvoteGroupByOutputType[P]>
        }
      >
    >


  export type DownvoteSelect = {
    userId?: boolean
    blogId?: boolean
    user?: boolean | UserArgs
    blog?: boolean | BlogArgs
  }


  export type DownvoteInclude = {
    user?: boolean | UserArgs
    blog?: boolean | BlogArgs
  }

  export type DownvoteGetPayload<S extends boolean | null | undefined | DownvoteArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Downvote :
    S extends undefined ? never :
    S extends { include: any } & (DownvoteArgs | DownvoteFindManyArgs)
    ? Downvote  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'blog' ? BlogGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (DownvoteArgs | DownvoteFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'blog' ? BlogGetPayload<S['select'][P]> :  P extends keyof Downvote ? Downvote[P] : never
  } 
      : Downvote


  type DownvoteCountArgs = 
    Omit<DownvoteFindManyArgs, 'select' | 'include'> & {
      select?: DownvoteCountAggregateInputType | true
    }

  export interface DownvoteDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Downvote that matches the filter.
     * @param {DownvoteFindUniqueArgs} args - Arguments to find a Downvote
     * @example
     * // Get one Downvote
     * const downvote = await prisma.downvote.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DownvoteFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DownvoteFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Downvote'> extends True ? Prisma__DownvoteClient<DownvoteGetPayload<T>> : Prisma__DownvoteClient<DownvoteGetPayload<T> | null, null>

    /**
     * Find one Downvote that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DownvoteFindUniqueOrThrowArgs} args - Arguments to find a Downvote
     * @example
     * // Get one Downvote
     * const downvote = await prisma.downvote.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DownvoteFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, DownvoteFindUniqueOrThrowArgs>
    ): Prisma__DownvoteClient<DownvoteGetPayload<T>>

    /**
     * Find the first Downvote that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DownvoteFindFirstArgs} args - Arguments to find a Downvote
     * @example
     * // Get one Downvote
     * const downvote = await prisma.downvote.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DownvoteFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DownvoteFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Downvote'> extends True ? Prisma__DownvoteClient<DownvoteGetPayload<T>> : Prisma__DownvoteClient<DownvoteGetPayload<T> | null, null>

    /**
     * Find the first Downvote that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DownvoteFindFirstOrThrowArgs} args - Arguments to find a Downvote
     * @example
     * // Get one Downvote
     * const downvote = await prisma.downvote.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DownvoteFindFirstOrThrowArgs>(
      args?: SelectSubset<T, DownvoteFindFirstOrThrowArgs>
    ): Prisma__DownvoteClient<DownvoteGetPayload<T>>

    /**
     * Find zero or more Downvotes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DownvoteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Downvotes
     * const downvotes = await prisma.downvote.findMany()
     * 
     * // Get first 10 Downvotes
     * const downvotes = await prisma.downvote.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const downvoteWithUserIdOnly = await prisma.downvote.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends DownvoteFindManyArgs>(
      args?: SelectSubset<T, DownvoteFindManyArgs>
    ): Prisma.PrismaPromise<Array<DownvoteGetPayload<T>>>

    /**
     * Create a Downvote.
     * @param {DownvoteCreateArgs} args - Arguments to create a Downvote.
     * @example
     * // Create one Downvote
     * const Downvote = await prisma.downvote.create({
     *   data: {
     *     // ... data to create a Downvote
     *   }
     * })
     * 
    **/
    create<T extends DownvoteCreateArgs>(
      args: SelectSubset<T, DownvoteCreateArgs>
    ): Prisma__DownvoteClient<DownvoteGetPayload<T>>

    /**
     * Create many Downvotes.
     *     @param {DownvoteCreateManyArgs} args - Arguments to create many Downvotes.
     *     @example
     *     // Create many Downvotes
     *     const downvote = await prisma.downvote.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DownvoteCreateManyArgs>(
      args?: SelectSubset<T, DownvoteCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Downvote.
     * @param {DownvoteDeleteArgs} args - Arguments to delete one Downvote.
     * @example
     * // Delete one Downvote
     * const Downvote = await prisma.downvote.delete({
     *   where: {
     *     // ... filter to delete one Downvote
     *   }
     * })
     * 
    **/
    delete<T extends DownvoteDeleteArgs>(
      args: SelectSubset<T, DownvoteDeleteArgs>
    ): Prisma__DownvoteClient<DownvoteGetPayload<T>>

    /**
     * Update one Downvote.
     * @param {DownvoteUpdateArgs} args - Arguments to update one Downvote.
     * @example
     * // Update one Downvote
     * const downvote = await prisma.downvote.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DownvoteUpdateArgs>(
      args: SelectSubset<T, DownvoteUpdateArgs>
    ): Prisma__DownvoteClient<DownvoteGetPayload<T>>

    /**
     * Delete zero or more Downvotes.
     * @param {DownvoteDeleteManyArgs} args - Arguments to filter Downvotes to delete.
     * @example
     * // Delete a few Downvotes
     * const { count } = await prisma.downvote.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DownvoteDeleteManyArgs>(
      args?: SelectSubset<T, DownvoteDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Downvotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DownvoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Downvotes
     * const downvote = await prisma.downvote.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DownvoteUpdateManyArgs>(
      args: SelectSubset<T, DownvoteUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Downvote.
     * @param {DownvoteUpsertArgs} args - Arguments to update or create a Downvote.
     * @example
     * // Update or create a Downvote
     * const downvote = await prisma.downvote.upsert({
     *   create: {
     *     // ... data to create a Downvote
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Downvote we want to update
     *   }
     * })
    **/
    upsert<T extends DownvoteUpsertArgs>(
      args: SelectSubset<T, DownvoteUpsertArgs>
    ): Prisma__DownvoteClient<DownvoteGetPayload<T>>

    /**
     * Count the number of Downvotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DownvoteCountArgs} args - Arguments to filter Downvotes to count.
     * @example
     * // Count the number of Downvotes
     * const count = await prisma.downvote.count({
     *   where: {
     *     // ... the filter for the Downvotes we want to count
     *   }
     * })
    **/
    count<T extends DownvoteCountArgs>(
      args?: Subset<T, DownvoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DownvoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Downvote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DownvoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DownvoteAggregateArgs>(args: Subset<T, DownvoteAggregateArgs>): Prisma.PrismaPromise<GetDownvoteAggregateType<T>>

    /**
     * Group by Downvote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DownvoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DownvoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DownvoteGroupByArgs['orderBy'] }
        : { orderBy?: DownvoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DownvoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDownvoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Downvote.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DownvoteClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    blog<T extends BlogArgs= {}>(args?: Subset<T, BlogArgs>): Prisma__BlogClient<BlogGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Downvote base type for findUnique actions
   */
  export type DownvoteFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Downvote
     */
    select?: DownvoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DownvoteInclude | null
    /**
     * Filter, which Downvote to fetch.
     */
    where: DownvoteWhereUniqueInput
  }

  /**
   * Downvote findUnique
   */
  export interface DownvoteFindUniqueArgs extends DownvoteFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Downvote findUniqueOrThrow
   */
  export type DownvoteFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Downvote
     */
    select?: DownvoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DownvoteInclude | null
    /**
     * Filter, which Downvote to fetch.
     */
    where: DownvoteWhereUniqueInput
  }


  /**
   * Downvote base type for findFirst actions
   */
  export type DownvoteFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Downvote
     */
    select?: DownvoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DownvoteInclude | null
    /**
     * Filter, which Downvote to fetch.
     */
    where?: DownvoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Downvotes to fetch.
     */
    orderBy?: Enumerable<DownvoteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Downvotes.
     */
    cursor?: DownvoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Downvotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Downvotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Downvotes.
     */
    distinct?: Enumerable<DownvoteScalarFieldEnum>
  }

  /**
   * Downvote findFirst
   */
  export interface DownvoteFindFirstArgs extends DownvoteFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Downvote findFirstOrThrow
   */
  export type DownvoteFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Downvote
     */
    select?: DownvoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DownvoteInclude | null
    /**
     * Filter, which Downvote to fetch.
     */
    where?: DownvoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Downvotes to fetch.
     */
    orderBy?: Enumerable<DownvoteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Downvotes.
     */
    cursor?: DownvoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Downvotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Downvotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Downvotes.
     */
    distinct?: Enumerable<DownvoteScalarFieldEnum>
  }


  /**
   * Downvote findMany
   */
  export type DownvoteFindManyArgs = {
    /**
     * Select specific fields to fetch from the Downvote
     */
    select?: DownvoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DownvoteInclude | null
    /**
     * Filter, which Downvotes to fetch.
     */
    where?: DownvoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Downvotes to fetch.
     */
    orderBy?: Enumerable<DownvoteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Downvotes.
     */
    cursor?: DownvoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Downvotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Downvotes.
     */
    skip?: number
    distinct?: Enumerable<DownvoteScalarFieldEnum>
  }


  /**
   * Downvote create
   */
  export type DownvoteCreateArgs = {
    /**
     * Select specific fields to fetch from the Downvote
     */
    select?: DownvoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DownvoteInclude | null
    /**
     * The data needed to create a Downvote.
     */
    data: XOR<DownvoteCreateInput, DownvoteUncheckedCreateInput>
  }


  /**
   * Downvote createMany
   */
  export type DownvoteCreateManyArgs = {
    /**
     * The data used to create many Downvotes.
     */
    data: Enumerable<DownvoteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Downvote update
   */
  export type DownvoteUpdateArgs = {
    /**
     * Select specific fields to fetch from the Downvote
     */
    select?: DownvoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DownvoteInclude | null
    /**
     * The data needed to update a Downvote.
     */
    data: XOR<DownvoteUpdateInput, DownvoteUncheckedUpdateInput>
    /**
     * Choose, which Downvote to update.
     */
    where: DownvoteWhereUniqueInput
  }


  /**
   * Downvote updateMany
   */
  export type DownvoteUpdateManyArgs = {
    /**
     * The data used to update Downvotes.
     */
    data: XOR<DownvoteUpdateManyMutationInput, DownvoteUncheckedUpdateManyInput>
    /**
     * Filter which Downvotes to update
     */
    where?: DownvoteWhereInput
  }


  /**
   * Downvote upsert
   */
  export type DownvoteUpsertArgs = {
    /**
     * Select specific fields to fetch from the Downvote
     */
    select?: DownvoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DownvoteInclude | null
    /**
     * The filter to search for the Downvote to update in case it exists.
     */
    where: DownvoteWhereUniqueInput
    /**
     * In case the Downvote found by the `where` argument doesn't exist, create a new Downvote with this data.
     */
    create: XOR<DownvoteCreateInput, DownvoteUncheckedCreateInput>
    /**
     * In case the Downvote was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DownvoteUpdateInput, DownvoteUncheckedUpdateInput>
  }


  /**
   * Downvote delete
   */
  export type DownvoteDeleteArgs = {
    /**
     * Select specific fields to fetch from the Downvote
     */
    select?: DownvoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DownvoteInclude | null
    /**
     * Filter which Downvote to delete.
     */
    where: DownvoteWhereUniqueInput
  }


  /**
   * Downvote deleteMany
   */
  export type DownvoteDeleteManyArgs = {
    /**
     * Filter which Downvotes to delete
     */
    where?: DownvoteWhereInput
  }


  /**
   * Downvote without action
   */
  export type DownvoteArgs = {
    /**
     * Select specific fields to fetch from the Downvote
     */
    select?: DownvoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DownvoteInclude | null
  }



  /**
   * Model Share
   */


  export type AggregateShare = {
    _count: ShareCountAggregateOutputType | null
    _avg: ShareAvgAggregateOutputType | null
    _sum: ShareSumAggregateOutputType | null
    _min: ShareMinAggregateOutputType | null
    _max: ShareMaxAggregateOutputType | null
  }

  export type ShareAvgAggregateOutputType = {
    blogId: number | null
  }

  export type ShareSumAggregateOutputType = {
    blogId: number | null
  }

  export type ShareMinAggregateOutputType = {
    userId: string | null
    blogId: number | null
  }

  export type ShareMaxAggregateOutputType = {
    userId: string | null
    blogId: number | null
  }

  export type ShareCountAggregateOutputType = {
    userId: number
    blogId: number
    _all: number
  }


  export type ShareAvgAggregateInputType = {
    blogId?: true
  }

  export type ShareSumAggregateInputType = {
    blogId?: true
  }

  export type ShareMinAggregateInputType = {
    userId?: true
    blogId?: true
  }

  export type ShareMaxAggregateInputType = {
    userId?: true
    blogId?: true
  }

  export type ShareCountAggregateInputType = {
    userId?: true
    blogId?: true
    _all?: true
  }

  export type ShareAggregateArgs = {
    /**
     * Filter which Share to aggregate.
     */
    where?: ShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shares to fetch.
     */
    orderBy?: Enumerable<ShareOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Shares
    **/
    _count?: true | ShareCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShareAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShareSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShareMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShareMaxAggregateInputType
  }

  export type GetShareAggregateType<T extends ShareAggregateArgs> = {
        [P in keyof T & keyof AggregateShare]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShare[P]>
      : GetScalarType<T[P], AggregateShare[P]>
  }




  export type ShareGroupByArgs = {
    where?: ShareWhereInput
    orderBy?: Enumerable<ShareOrderByWithAggregationInput>
    by: ShareScalarFieldEnum[]
    having?: ShareScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShareCountAggregateInputType | true
    _avg?: ShareAvgAggregateInputType
    _sum?: ShareSumAggregateInputType
    _min?: ShareMinAggregateInputType
    _max?: ShareMaxAggregateInputType
  }


  export type ShareGroupByOutputType = {
    userId: string
    blogId: number
    _count: ShareCountAggregateOutputType | null
    _avg: ShareAvgAggregateOutputType | null
    _sum: ShareSumAggregateOutputType | null
    _min: ShareMinAggregateOutputType | null
    _max: ShareMaxAggregateOutputType | null
  }

  type GetShareGroupByPayload<T extends ShareGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ShareGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShareGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShareGroupByOutputType[P]>
            : GetScalarType<T[P], ShareGroupByOutputType[P]>
        }
      >
    >


  export type ShareSelect = {
    userId?: boolean
    blogId?: boolean
    user?: boolean | UserArgs
    blog?: boolean | BlogArgs
  }


  export type ShareInclude = {
    user?: boolean | UserArgs
    blog?: boolean | BlogArgs
  }

  export type ShareGetPayload<S extends boolean | null | undefined | ShareArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Share :
    S extends undefined ? never :
    S extends { include: any } & (ShareArgs | ShareFindManyArgs)
    ? Share  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'blog' ? BlogGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ShareArgs | ShareFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'blog' ? BlogGetPayload<S['select'][P]> :  P extends keyof Share ? Share[P] : never
  } 
      : Share


  type ShareCountArgs = 
    Omit<ShareFindManyArgs, 'select' | 'include'> & {
      select?: ShareCountAggregateInputType | true
    }

  export interface ShareDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Share that matches the filter.
     * @param {ShareFindUniqueArgs} args - Arguments to find a Share
     * @example
     * // Get one Share
     * const share = await prisma.share.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ShareFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ShareFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Share'> extends True ? Prisma__ShareClient<ShareGetPayload<T>> : Prisma__ShareClient<ShareGetPayload<T> | null, null>

    /**
     * Find one Share that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ShareFindUniqueOrThrowArgs} args - Arguments to find a Share
     * @example
     * // Get one Share
     * const share = await prisma.share.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ShareFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ShareFindUniqueOrThrowArgs>
    ): Prisma__ShareClient<ShareGetPayload<T>>

    /**
     * Find the first Share that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareFindFirstArgs} args - Arguments to find a Share
     * @example
     * // Get one Share
     * const share = await prisma.share.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ShareFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ShareFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Share'> extends True ? Prisma__ShareClient<ShareGetPayload<T>> : Prisma__ShareClient<ShareGetPayload<T> | null, null>

    /**
     * Find the first Share that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareFindFirstOrThrowArgs} args - Arguments to find a Share
     * @example
     * // Get one Share
     * const share = await prisma.share.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ShareFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ShareFindFirstOrThrowArgs>
    ): Prisma__ShareClient<ShareGetPayload<T>>

    /**
     * Find zero or more Shares that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Shares
     * const shares = await prisma.share.findMany()
     * 
     * // Get first 10 Shares
     * const shares = await prisma.share.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const shareWithUserIdOnly = await prisma.share.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends ShareFindManyArgs>(
      args?: SelectSubset<T, ShareFindManyArgs>
    ): Prisma.PrismaPromise<Array<ShareGetPayload<T>>>

    /**
     * Create a Share.
     * @param {ShareCreateArgs} args - Arguments to create a Share.
     * @example
     * // Create one Share
     * const Share = await prisma.share.create({
     *   data: {
     *     // ... data to create a Share
     *   }
     * })
     * 
    **/
    create<T extends ShareCreateArgs>(
      args: SelectSubset<T, ShareCreateArgs>
    ): Prisma__ShareClient<ShareGetPayload<T>>

    /**
     * Create many Shares.
     *     @param {ShareCreateManyArgs} args - Arguments to create many Shares.
     *     @example
     *     // Create many Shares
     *     const share = await prisma.share.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ShareCreateManyArgs>(
      args?: SelectSubset<T, ShareCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Share.
     * @param {ShareDeleteArgs} args - Arguments to delete one Share.
     * @example
     * // Delete one Share
     * const Share = await prisma.share.delete({
     *   where: {
     *     // ... filter to delete one Share
     *   }
     * })
     * 
    **/
    delete<T extends ShareDeleteArgs>(
      args: SelectSubset<T, ShareDeleteArgs>
    ): Prisma__ShareClient<ShareGetPayload<T>>

    /**
     * Update one Share.
     * @param {ShareUpdateArgs} args - Arguments to update one Share.
     * @example
     * // Update one Share
     * const share = await prisma.share.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ShareUpdateArgs>(
      args: SelectSubset<T, ShareUpdateArgs>
    ): Prisma__ShareClient<ShareGetPayload<T>>

    /**
     * Delete zero or more Shares.
     * @param {ShareDeleteManyArgs} args - Arguments to filter Shares to delete.
     * @example
     * // Delete a few Shares
     * const { count } = await prisma.share.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ShareDeleteManyArgs>(
      args?: SelectSubset<T, ShareDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Shares.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Shares
     * const share = await prisma.share.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ShareUpdateManyArgs>(
      args: SelectSubset<T, ShareUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Share.
     * @param {ShareUpsertArgs} args - Arguments to update or create a Share.
     * @example
     * // Update or create a Share
     * const share = await prisma.share.upsert({
     *   create: {
     *     // ... data to create a Share
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Share we want to update
     *   }
     * })
    **/
    upsert<T extends ShareUpsertArgs>(
      args: SelectSubset<T, ShareUpsertArgs>
    ): Prisma__ShareClient<ShareGetPayload<T>>

    /**
     * Count the number of Shares.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareCountArgs} args - Arguments to filter Shares to count.
     * @example
     * // Count the number of Shares
     * const count = await prisma.share.count({
     *   where: {
     *     // ... the filter for the Shares we want to count
     *   }
     * })
    **/
    count<T extends ShareCountArgs>(
      args?: Subset<T, ShareCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShareCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Share.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShareAggregateArgs>(args: Subset<T, ShareAggregateArgs>): Prisma.PrismaPromise<GetShareAggregateType<T>>

    /**
     * Group by Share.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShareGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShareGroupByArgs['orderBy'] }
        : { orderBy?: ShareGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShareGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShareGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Share.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ShareClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    blog<T extends BlogArgs= {}>(args?: Subset<T, BlogArgs>): Prisma__BlogClient<BlogGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Share base type for findUnique actions
   */
  export type ShareFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShareInclude | null
    /**
     * Filter, which Share to fetch.
     */
    where: ShareWhereUniqueInput
  }

  /**
   * Share findUnique
   */
  export interface ShareFindUniqueArgs extends ShareFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Share findUniqueOrThrow
   */
  export type ShareFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShareInclude | null
    /**
     * Filter, which Share to fetch.
     */
    where: ShareWhereUniqueInput
  }


  /**
   * Share base type for findFirst actions
   */
  export type ShareFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShareInclude | null
    /**
     * Filter, which Share to fetch.
     */
    where?: ShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shares to fetch.
     */
    orderBy?: Enumerable<ShareOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shares.
     */
    cursor?: ShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shares.
     */
    distinct?: Enumerable<ShareScalarFieldEnum>
  }

  /**
   * Share findFirst
   */
  export interface ShareFindFirstArgs extends ShareFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Share findFirstOrThrow
   */
  export type ShareFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShareInclude | null
    /**
     * Filter, which Share to fetch.
     */
    where?: ShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shares to fetch.
     */
    orderBy?: Enumerable<ShareOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shares.
     */
    cursor?: ShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shares.
     */
    distinct?: Enumerable<ShareScalarFieldEnum>
  }


  /**
   * Share findMany
   */
  export type ShareFindManyArgs = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShareInclude | null
    /**
     * Filter, which Shares to fetch.
     */
    where?: ShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shares to fetch.
     */
    orderBy?: Enumerable<ShareOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Shares.
     */
    cursor?: ShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shares.
     */
    skip?: number
    distinct?: Enumerable<ShareScalarFieldEnum>
  }


  /**
   * Share create
   */
  export type ShareCreateArgs = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShareInclude | null
    /**
     * The data needed to create a Share.
     */
    data: XOR<ShareCreateInput, ShareUncheckedCreateInput>
  }


  /**
   * Share createMany
   */
  export type ShareCreateManyArgs = {
    /**
     * The data used to create many Shares.
     */
    data: Enumerable<ShareCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Share update
   */
  export type ShareUpdateArgs = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShareInclude | null
    /**
     * The data needed to update a Share.
     */
    data: XOR<ShareUpdateInput, ShareUncheckedUpdateInput>
    /**
     * Choose, which Share to update.
     */
    where: ShareWhereUniqueInput
  }


  /**
   * Share updateMany
   */
  export type ShareUpdateManyArgs = {
    /**
     * The data used to update Shares.
     */
    data: XOR<ShareUpdateManyMutationInput, ShareUncheckedUpdateManyInput>
    /**
     * Filter which Shares to update
     */
    where?: ShareWhereInput
  }


  /**
   * Share upsert
   */
  export type ShareUpsertArgs = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShareInclude | null
    /**
     * The filter to search for the Share to update in case it exists.
     */
    where: ShareWhereUniqueInput
    /**
     * In case the Share found by the `where` argument doesn't exist, create a new Share with this data.
     */
    create: XOR<ShareCreateInput, ShareUncheckedCreateInput>
    /**
     * In case the Share was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShareUpdateInput, ShareUncheckedUpdateInput>
  }


  /**
   * Share delete
   */
  export type ShareDeleteArgs = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShareInclude | null
    /**
     * Filter which Share to delete.
     */
    where: ShareWhereUniqueInput
  }


  /**
   * Share deleteMany
   */
  export type ShareDeleteManyArgs = {
    /**
     * Filter which Shares to delete
     */
    where?: ShareWhereInput
  }


  /**
   * Share without action
   */
  export type ShareArgs = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShareInclude | null
  }



  /**
   * Model Comment
   */


  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentAvgAggregateOutputType = {
    id: number | null
    like_count: number | null
    blogId: number | null
  }

  export type CommentSumAggregateOutputType = {
    id: number | null
    like_count: number | null
    blogId: number | null
  }

  export type CommentMinAggregateOutputType = {
    id: number | null
    content: string | null
    date: Date | null
    liked: boolean | null
    like_count: number | null
    userId: string | null
    blogId: number | null
  }

  export type CommentMaxAggregateOutputType = {
    id: number | null
    content: string | null
    date: Date | null
    liked: boolean | null
    like_count: number | null
    userId: string | null
    blogId: number | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    content: number
    date: number
    liked: number
    like_count: number
    userId: number
    blogId: number
    _all: number
  }


  export type CommentAvgAggregateInputType = {
    id?: true
    like_count?: true
    blogId?: true
  }

  export type CommentSumAggregateInputType = {
    id?: true
    like_count?: true
    blogId?: true
  }

  export type CommentMinAggregateInputType = {
    id?: true
    content?: true
    date?: true
    liked?: true
    like_count?: true
    userId?: true
    blogId?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    content?: true
    date?: true
    liked?: true
    like_count?: true
    userId?: true
    blogId?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    content?: true
    date?: true
    liked?: true
    like_count?: true
    userId?: true
    blogId?: true
    _all?: true
  }

  export type CommentAggregateArgs = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: Enumerable<CommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs = {
    where?: CommentWhereInput
    orderBy?: Enumerable<CommentOrderByWithAggregationInput>
    by: CommentScalarFieldEnum[]
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _avg?: CommentAvgAggregateInputType
    _sum?: CommentSumAggregateInputType
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }


  export type CommentGroupByOutputType = {
    id: number
    content: string
    date: Date
    liked: boolean
    like_count: number
    userId: string
    blogId: number
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect = {
    id?: boolean
    content?: boolean
    date?: boolean
    liked?: boolean
    like_count?: boolean
    userId?: boolean
    blogId?: boolean
    user?: boolean | UserArgs
    blog?: boolean | BlogArgs
  }


  export type CommentInclude = {
    user?: boolean | UserArgs
    blog?: boolean | BlogArgs
  }

  export type CommentGetPayload<S extends boolean | null | undefined | CommentArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Comment :
    S extends undefined ? never :
    S extends { include: any } & (CommentArgs | CommentFindManyArgs)
    ? Comment  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'blog' ? BlogGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (CommentArgs | CommentFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'blog' ? BlogGetPayload<S['select'][P]> :  P extends keyof Comment ? Comment[P] : never
  } 
      : Comment


  type CommentCountArgs = 
    Omit<CommentFindManyArgs, 'select' | 'include'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CommentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CommentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Comment'> extends True ? Prisma__CommentClient<CommentGetPayload<T>> : Prisma__CommentClient<CommentGetPayload<T> | null, null>

    /**
     * Find one Comment that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CommentFindUniqueOrThrowArgs>
    ): Prisma__CommentClient<CommentGetPayload<T>>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CommentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CommentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Comment'> extends True ? Prisma__CommentClient<CommentGetPayload<T>> : Prisma__CommentClient<CommentGetPayload<T> | null, null>

    /**
     * Find the first Comment that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CommentFindFirstOrThrowArgs>
    ): Prisma__CommentClient<CommentGetPayload<T>>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CommentFindManyArgs>(
      args?: SelectSubset<T, CommentFindManyArgs>
    ): Prisma.PrismaPromise<Array<CommentGetPayload<T>>>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
    **/
    create<T extends CommentCreateArgs>(
      args: SelectSubset<T, CommentCreateArgs>
    ): Prisma__CommentClient<CommentGetPayload<T>>

    /**
     * Create many Comments.
     *     @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     *     @example
     *     // Create many Comments
     *     const comment = await prisma.comment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CommentCreateManyArgs>(
      args?: SelectSubset<T, CommentCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
    **/
    delete<T extends CommentDeleteArgs>(
      args: SelectSubset<T, CommentDeleteArgs>
    ): Prisma__CommentClient<CommentGetPayload<T>>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CommentUpdateArgs>(
      args: SelectSubset<T, CommentUpdateArgs>
    ): Prisma__CommentClient<CommentGetPayload<T>>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CommentDeleteManyArgs>(
      args?: SelectSubset<T, CommentDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CommentUpdateManyArgs>(
      args: SelectSubset<T, CommentUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
    **/
    upsert<T extends CommentUpsertArgs>(
      args: SelectSubset<T, CommentUpsertArgs>
    ): Prisma__CommentClient<CommentGetPayload<T>>

    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CommentClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    blog<T extends BlogArgs= {}>(args?: Subset<T, BlogArgs>): Prisma__BlogClient<BlogGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Comment base type for findUnique actions
   */
  export type CommentFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findUnique
   */
  export interface CommentFindUniqueArgs extends CommentFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }


  /**
   * Comment base type for findFirst actions
   */
  export type CommentFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: Enumerable<CommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: Enumerable<CommentScalarFieldEnum>
  }

  /**
   * Comment findFirst
   */
  export interface CommentFindFirstArgs extends CommentFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: Enumerable<CommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: Enumerable<CommentScalarFieldEnum>
  }


  /**
   * Comment findMany
   */
  export type CommentFindManyArgs = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: Enumerable<CommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: Enumerable<CommentScalarFieldEnum>
  }


  /**
   * Comment create
   */
  export type CommentCreateArgs = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }


  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs = {
    /**
     * The data used to create many Comments.
     */
    data: Enumerable<CommentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Comment update
   */
  export type CommentUpdateArgs = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }


  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
  }


  /**
   * Comment upsert
   */
  export type CommentUpsertArgs = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }


  /**
   * Comment delete
   */
  export type CommentDeleteArgs = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }


  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
  }


  /**
   * Comment without action
   */
  export type CommentArgs = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude | null
  }



  /**
   * Model History
   */


  export type AggregateHistory = {
    _count: HistoryCountAggregateOutputType | null
    _avg: HistoryAvgAggregateOutputType | null
    _sum: HistorySumAggregateOutputType | null
    _min: HistoryMinAggregateOutputType | null
    _max: HistoryMaxAggregateOutputType | null
  }

  export type HistoryAvgAggregateOutputType = {
    blogId: number | null
  }

  export type HistorySumAggregateOutputType = {
    blogId: number | null
  }

  export type HistoryMinAggregateOutputType = {
    date: Date | null
    userId: string | null
    blogId: number | null
  }

  export type HistoryMaxAggregateOutputType = {
    date: Date | null
    userId: string | null
    blogId: number | null
  }

  export type HistoryCountAggregateOutputType = {
    date: number
    userId: number
    blogId: number
    _all: number
  }


  export type HistoryAvgAggregateInputType = {
    blogId?: true
  }

  export type HistorySumAggregateInputType = {
    blogId?: true
  }

  export type HistoryMinAggregateInputType = {
    date?: true
    userId?: true
    blogId?: true
  }

  export type HistoryMaxAggregateInputType = {
    date?: true
    userId?: true
    blogId?: true
  }

  export type HistoryCountAggregateInputType = {
    date?: true
    userId?: true
    blogId?: true
    _all?: true
  }

  export type HistoryAggregateArgs = {
    /**
     * Filter which History to aggregate.
     */
    where?: HistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Histories to fetch.
     */
    orderBy?: Enumerable<HistoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Histories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Histories
    **/
    _count?: true | HistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HistoryMaxAggregateInputType
  }

  export type GetHistoryAggregateType<T extends HistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHistory[P]>
      : GetScalarType<T[P], AggregateHistory[P]>
  }




  export type HistoryGroupByArgs = {
    where?: HistoryWhereInput
    orderBy?: Enumerable<HistoryOrderByWithAggregationInput>
    by: HistoryScalarFieldEnum[]
    having?: HistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HistoryCountAggregateInputType | true
    _avg?: HistoryAvgAggregateInputType
    _sum?: HistorySumAggregateInputType
    _min?: HistoryMinAggregateInputType
    _max?: HistoryMaxAggregateInputType
  }


  export type HistoryGroupByOutputType = {
    date: Date
    userId: string
    blogId: number
    _count: HistoryCountAggregateOutputType | null
    _avg: HistoryAvgAggregateOutputType | null
    _sum: HistorySumAggregateOutputType | null
    _min: HistoryMinAggregateOutputType | null
    _max: HistoryMaxAggregateOutputType | null
  }

  type GetHistoryGroupByPayload<T extends HistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<HistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HistoryGroupByOutputType[P]>
            : GetScalarType<T[P], HistoryGroupByOutputType[P]>
        }
      >
    >


  export type HistorySelect = {
    date?: boolean
    userId?: boolean
    blogId?: boolean
    user?: boolean | UserArgs
    blog?: boolean | BlogArgs
  }


  export type HistoryInclude = {
    user?: boolean | UserArgs
    blog?: boolean | BlogArgs
  }

  export type HistoryGetPayload<S extends boolean | null | undefined | HistoryArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? History :
    S extends undefined ? never :
    S extends { include: any } & (HistoryArgs | HistoryFindManyArgs)
    ? History  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'blog' ? BlogGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (HistoryArgs | HistoryFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'blog' ? BlogGetPayload<S['select'][P]> :  P extends keyof History ? History[P] : never
  } 
      : History


  type HistoryCountArgs = 
    Omit<HistoryFindManyArgs, 'select' | 'include'> & {
      select?: HistoryCountAggregateInputType | true
    }

  export interface HistoryDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one History that matches the filter.
     * @param {HistoryFindUniqueArgs} args - Arguments to find a History
     * @example
     * // Get one History
     * const history = await prisma.history.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HistoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, HistoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'History'> extends True ? Prisma__HistoryClient<HistoryGetPayload<T>> : Prisma__HistoryClient<HistoryGetPayload<T> | null, null>

    /**
     * Find one History that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {HistoryFindUniqueOrThrowArgs} args - Arguments to find a History
     * @example
     * // Get one History
     * const history = await prisma.history.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends HistoryFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, HistoryFindUniqueOrThrowArgs>
    ): Prisma__HistoryClient<HistoryGetPayload<T>>

    /**
     * Find the first History that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryFindFirstArgs} args - Arguments to find a History
     * @example
     * // Get one History
     * const history = await prisma.history.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HistoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, HistoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'History'> extends True ? Prisma__HistoryClient<HistoryGetPayload<T>> : Prisma__HistoryClient<HistoryGetPayload<T> | null, null>

    /**
     * Find the first History that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryFindFirstOrThrowArgs} args - Arguments to find a History
     * @example
     * // Get one History
     * const history = await prisma.history.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends HistoryFindFirstOrThrowArgs>(
      args?: SelectSubset<T, HistoryFindFirstOrThrowArgs>
    ): Prisma__HistoryClient<HistoryGetPayload<T>>

    /**
     * Find zero or more Histories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Histories
     * const histories = await prisma.history.findMany()
     * 
     * // Get first 10 Histories
     * const histories = await prisma.history.findMany({ take: 10 })
     * 
     * // Only select the `date`
     * const historyWithDateOnly = await prisma.history.findMany({ select: { date: true } })
     * 
    **/
    findMany<T extends HistoryFindManyArgs>(
      args?: SelectSubset<T, HistoryFindManyArgs>
    ): Prisma.PrismaPromise<Array<HistoryGetPayload<T>>>

    /**
     * Create a History.
     * @param {HistoryCreateArgs} args - Arguments to create a History.
     * @example
     * // Create one History
     * const History = await prisma.history.create({
     *   data: {
     *     // ... data to create a History
     *   }
     * })
     * 
    **/
    create<T extends HistoryCreateArgs>(
      args: SelectSubset<T, HistoryCreateArgs>
    ): Prisma__HistoryClient<HistoryGetPayload<T>>

    /**
     * Create many Histories.
     *     @param {HistoryCreateManyArgs} args - Arguments to create many Histories.
     *     @example
     *     // Create many Histories
     *     const history = await prisma.history.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends HistoryCreateManyArgs>(
      args?: SelectSubset<T, HistoryCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a History.
     * @param {HistoryDeleteArgs} args - Arguments to delete one History.
     * @example
     * // Delete one History
     * const History = await prisma.history.delete({
     *   where: {
     *     // ... filter to delete one History
     *   }
     * })
     * 
    **/
    delete<T extends HistoryDeleteArgs>(
      args: SelectSubset<T, HistoryDeleteArgs>
    ): Prisma__HistoryClient<HistoryGetPayload<T>>

    /**
     * Update one History.
     * @param {HistoryUpdateArgs} args - Arguments to update one History.
     * @example
     * // Update one History
     * const history = await prisma.history.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HistoryUpdateArgs>(
      args: SelectSubset<T, HistoryUpdateArgs>
    ): Prisma__HistoryClient<HistoryGetPayload<T>>

    /**
     * Delete zero or more Histories.
     * @param {HistoryDeleteManyArgs} args - Arguments to filter Histories to delete.
     * @example
     * // Delete a few Histories
     * const { count } = await prisma.history.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HistoryDeleteManyArgs>(
      args?: SelectSubset<T, HistoryDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Histories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Histories
     * const history = await prisma.history.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HistoryUpdateManyArgs>(
      args: SelectSubset<T, HistoryUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one History.
     * @param {HistoryUpsertArgs} args - Arguments to update or create a History.
     * @example
     * // Update or create a History
     * const history = await prisma.history.upsert({
     *   create: {
     *     // ... data to create a History
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the History we want to update
     *   }
     * })
    **/
    upsert<T extends HistoryUpsertArgs>(
      args: SelectSubset<T, HistoryUpsertArgs>
    ): Prisma__HistoryClient<HistoryGetPayload<T>>

    /**
     * Count the number of Histories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryCountArgs} args - Arguments to filter Histories to count.
     * @example
     * // Count the number of Histories
     * const count = await prisma.history.count({
     *   where: {
     *     // ... the filter for the Histories we want to count
     *   }
     * })
    **/
    count<T extends HistoryCountArgs>(
      args?: Subset<T, HistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a History.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HistoryAggregateArgs>(args: Subset<T, HistoryAggregateArgs>): Prisma.PrismaPromise<GetHistoryAggregateType<T>>

    /**
     * Group by History.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HistoryGroupByArgs['orderBy'] }
        : { orderBy?: HistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for History.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__HistoryClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    blog<T extends BlogArgs= {}>(args?: Subset<T, BlogArgs>): Prisma__BlogClient<BlogGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * History base type for findUnique actions
   */
  export type HistoryFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude | null
    /**
     * Filter, which History to fetch.
     */
    where: HistoryWhereUniqueInput
  }

  /**
   * History findUnique
   */
  export interface HistoryFindUniqueArgs extends HistoryFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * History findUniqueOrThrow
   */
  export type HistoryFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude | null
    /**
     * Filter, which History to fetch.
     */
    where: HistoryWhereUniqueInput
  }


  /**
   * History base type for findFirst actions
   */
  export type HistoryFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude | null
    /**
     * Filter, which History to fetch.
     */
    where?: HistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Histories to fetch.
     */
    orderBy?: Enumerable<HistoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Histories.
     */
    cursor?: HistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Histories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Histories.
     */
    distinct?: Enumerable<HistoryScalarFieldEnum>
  }

  /**
   * History findFirst
   */
  export interface HistoryFindFirstArgs extends HistoryFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * History findFirstOrThrow
   */
  export type HistoryFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude | null
    /**
     * Filter, which History to fetch.
     */
    where?: HistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Histories to fetch.
     */
    orderBy?: Enumerable<HistoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Histories.
     */
    cursor?: HistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Histories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Histories.
     */
    distinct?: Enumerable<HistoryScalarFieldEnum>
  }


  /**
   * History findMany
   */
  export type HistoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude | null
    /**
     * Filter, which Histories to fetch.
     */
    where?: HistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Histories to fetch.
     */
    orderBy?: Enumerable<HistoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Histories.
     */
    cursor?: HistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Histories.
     */
    skip?: number
    distinct?: Enumerable<HistoryScalarFieldEnum>
  }


  /**
   * History create
   */
  export type HistoryCreateArgs = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude | null
    /**
     * The data needed to create a History.
     */
    data: XOR<HistoryCreateInput, HistoryUncheckedCreateInput>
  }


  /**
   * History createMany
   */
  export type HistoryCreateManyArgs = {
    /**
     * The data used to create many Histories.
     */
    data: Enumerable<HistoryCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * History update
   */
  export type HistoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude | null
    /**
     * The data needed to update a History.
     */
    data: XOR<HistoryUpdateInput, HistoryUncheckedUpdateInput>
    /**
     * Choose, which History to update.
     */
    where: HistoryWhereUniqueInput
  }


  /**
   * History updateMany
   */
  export type HistoryUpdateManyArgs = {
    /**
     * The data used to update Histories.
     */
    data: XOR<HistoryUpdateManyMutationInput, HistoryUncheckedUpdateManyInput>
    /**
     * Filter which Histories to update
     */
    where?: HistoryWhereInput
  }


  /**
   * History upsert
   */
  export type HistoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude | null
    /**
     * The filter to search for the History to update in case it exists.
     */
    where: HistoryWhereUniqueInput
    /**
     * In case the History found by the `where` argument doesn't exist, create a new History with this data.
     */
    create: XOR<HistoryCreateInput, HistoryUncheckedCreateInput>
    /**
     * In case the History was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HistoryUpdateInput, HistoryUncheckedUpdateInput>
  }


  /**
   * History delete
   */
  export type HistoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude | null
    /**
     * Filter which History to delete.
     */
    where: HistoryWhereUniqueInput
  }


  /**
   * History deleteMany
   */
  export type HistoryDeleteManyArgs = {
    /**
     * Filter which Histories to delete
     */
    where?: HistoryWhereInput
  }


  /**
   * History without action
   */
  export type HistoryArgs = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude | null
  }



  /**
   * Model Follow
   */


  export type AggregateFollow = {
    _count: FollowCountAggregateOutputType | null
    _min: FollowMinAggregateOutputType | null
    _max: FollowMaxAggregateOutputType | null
  }

  export type FollowMinAggregateOutputType = {
    followerId: string | null
    followingId: string | null
  }

  export type FollowMaxAggregateOutputType = {
    followerId: string | null
    followingId: string | null
  }

  export type FollowCountAggregateOutputType = {
    followerId: number
    followingId: number
    _all: number
  }


  export type FollowMinAggregateInputType = {
    followerId?: true
    followingId?: true
  }

  export type FollowMaxAggregateInputType = {
    followerId?: true
    followingId?: true
  }

  export type FollowCountAggregateInputType = {
    followerId?: true
    followingId?: true
    _all?: true
  }

  export type FollowAggregateArgs = {
    /**
     * Filter which Follow to aggregate.
     */
    where?: FollowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Follows to fetch.
     */
    orderBy?: Enumerable<FollowOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FollowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Follows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Follows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Follows
    **/
    _count?: true | FollowCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FollowMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FollowMaxAggregateInputType
  }

  export type GetFollowAggregateType<T extends FollowAggregateArgs> = {
        [P in keyof T & keyof AggregateFollow]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFollow[P]>
      : GetScalarType<T[P], AggregateFollow[P]>
  }




  export type FollowGroupByArgs = {
    where?: FollowWhereInput
    orderBy?: Enumerable<FollowOrderByWithAggregationInput>
    by: FollowScalarFieldEnum[]
    having?: FollowScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FollowCountAggregateInputType | true
    _min?: FollowMinAggregateInputType
    _max?: FollowMaxAggregateInputType
  }


  export type FollowGroupByOutputType = {
    followerId: string
    followingId: string
    _count: FollowCountAggregateOutputType | null
    _min: FollowMinAggregateOutputType | null
    _max: FollowMaxAggregateOutputType | null
  }

  type GetFollowGroupByPayload<T extends FollowGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<FollowGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FollowGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FollowGroupByOutputType[P]>
            : GetScalarType<T[P], FollowGroupByOutputType[P]>
        }
      >
    >


  export type FollowSelect = {
    followerId?: boolean
    followingId?: boolean
    follower?: boolean | UserArgs
    following?: boolean | UserArgs
  }


  export type FollowInclude = {
    follower?: boolean | UserArgs
    following?: boolean | UserArgs
  }

  export type FollowGetPayload<S extends boolean | null | undefined | FollowArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Follow :
    S extends undefined ? never :
    S extends { include: any } & (FollowArgs | FollowFindManyArgs)
    ? Follow  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'follower' ? UserGetPayload<S['include'][P]> :
        P extends 'following' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (FollowArgs | FollowFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'follower' ? UserGetPayload<S['select'][P]> :
        P extends 'following' ? UserGetPayload<S['select'][P]> :  P extends keyof Follow ? Follow[P] : never
  } 
      : Follow


  type FollowCountArgs = 
    Omit<FollowFindManyArgs, 'select' | 'include'> & {
      select?: FollowCountAggregateInputType | true
    }

  export interface FollowDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Follow that matches the filter.
     * @param {FollowFindUniqueArgs} args - Arguments to find a Follow
     * @example
     * // Get one Follow
     * const follow = await prisma.follow.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FollowFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FollowFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Follow'> extends True ? Prisma__FollowClient<FollowGetPayload<T>> : Prisma__FollowClient<FollowGetPayload<T> | null, null>

    /**
     * Find one Follow that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FollowFindUniqueOrThrowArgs} args - Arguments to find a Follow
     * @example
     * // Get one Follow
     * const follow = await prisma.follow.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FollowFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FollowFindUniqueOrThrowArgs>
    ): Prisma__FollowClient<FollowGetPayload<T>>

    /**
     * Find the first Follow that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowFindFirstArgs} args - Arguments to find a Follow
     * @example
     * // Get one Follow
     * const follow = await prisma.follow.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FollowFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FollowFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Follow'> extends True ? Prisma__FollowClient<FollowGetPayload<T>> : Prisma__FollowClient<FollowGetPayload<T> | null, null>

    /**
     * Find the first Follow that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowFindFirstOrThrowArgs} args - Arguments to find a Follow
     * @example
     * // Get one Follow
     * const follow = await prisma.follow.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FollowFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FollowFindFirstOrThrowArgs>
    ): Prisma__FollowClient<FollowGetPayload<T>>

    /**
     * Find zero or more Follows that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Follows
     * const follows = await prisma.follow.findMany()
     * 
     * // Get first 10 Follows
     * const follows = await prisma.follow.findMany({ take: 10 })
     * 
     * // Only select the `followerId`
     * const followWithFollowerIdOnly = await prisma.follow.findMany({ select: { followerId: true } })
     * 
    **/
    findMany<T extends FollowFindManyArgs>(
      args?: SelectSubset<T, FollowFindManyArgs>
    ): Prisma.PrismaPromise<Array<FollowGetPayload<T>>>

    /**
     * Create a Follow.
     * @param {FollowCreateArgs} args - Arguments to create a Follow.
     * @example
     * // Create one Follow
     * const Follow = await prisma.follow.create({
     *   data: {
     *     // ... data to create a Follow
     *   }
     * })
     * 
    **/
    create<T extends FollowCreateArgs>(
      args: SelectSubset<T, FollowCreateArgs>
    ): Prisma__FollowClient<FollowGetPayload<T>>

    /**
     * Create many Follows.
     *     @param {FollowCreateManyArgs} args - Arguments to create many Follows.
     *     @example
     *     // Create many Follows
     *     const follow = await prisma.follow.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FollowCreateManyArgs>(
      args?: SelectSubset<T, FollowCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Follow.
     * @param {FollowDeleteArgs} args - Arguments to delete one Follow.
     * @example
     * // Delete one Follow
     * const Follow = await prisma.follow.delete({
     *   where: {
     *     // ... filter to delete one Follow
     *   }
     * })
     * 
    **/
    delete<T extends FollowDeleteArgs>(
      args: SelectSubset<T, FollowDeleteArgs>
    ): Prisma__FollowClient<FollowGetPayload<T>>

    /**
     * Update one Follow.
     * @param {FollowUpdateArgs} args - Arguments to update one Follow.
     * @example
     * // Update one Follow
     * const follow = await prisma.follow.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FollowUpdateArgs>(
      args: SelectSubset<T, FollowUpdateArgs>
    ): Prisma__FollowClient<FollowGetPayload<T>>

    /**
     * Delete zero or more Follows.
     * @param {FollowDeleteManyArgs} args - Arguments to filter Follows to delete.
     * @example
     * // Delete a few Follows
     * const { count } = await prisma.follow.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FollowDeleteManyArgs>(
      args?: SelectSubset<T, FollowDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Follows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Follows
     * const follow = await prisma.follow.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FollowUpdateManyArgs>(
      args: SelectSubset<T, FollowUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Follow.
     * @param {FollowUpsertArgs} args - Arguments to update or create a Follow.
     * @example
     * // Update or create a Follow
     * const follow = await prisma.follow.upsert({
     *   create: {
     *     // ... data to create a Follow
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Follow we want to update
     *   }
     * })
    **/
    upsert<T extends FollowUpsertArgs>(
      args: SelectSubset<T, FollowUpsertArgs>
    ): Prisma__FollowClient<FollowGetPayload<T>>

    /**
     * Count the number of Follows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowCountArgs} args - Arguments to filter Follows to count.
     * @example
     * // Count the number of Follows
     * const count = await prisma.follow.count({
     *   where: {
     *     // ... the filter for the Follows we want to count
     *   }
     * })
    **/
    count<T extends FollowCountArgs>(
      args?: Subset<T, FollowCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FollowCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Follow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FollowAggregateArgs>(args: Subset<T, FollowAggregateArgs>): Prisma.PrismaPromise<GetFollowAggregateType<T>>

    /**
     * Group by Follow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FollowGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FollowGroupByArgs['orderBy'] }
        : { orderBy?: FollowGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FollowGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFollowGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Follow.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FollowClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    follower<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    following<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Follow base type for findUnique actions
   */
  export type FollowFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowInclude | null
    /**
     * Filter, which Follow to fetch.
     */
    where: FollowWhereUniqueInput
  }

  /**
   * Follow findUnique
   */
  export interface FollowFindUniqueArgs extends FollowFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Follow findUniqueOrThrow
   */
  export type FollowFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowInclude | null
    /**
     * Filter, which Follow to fetch.
     */
    where: FollowWhereUniqueInput
  }


  /**
   * Follow base type for findFirst actions
   */
  export type FollowFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowInclude | null
    /**
     * Filter, which Follow to fetch.
     */
    where?: FollowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Follows to fetch.
     */
    orderBy?: Enumerable<FollowOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Follows.
     */
    cursor?: FollowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Follows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Follows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Follows.
     */
    distinct?: Enumerable<FollowScalarFieldEnum>
  }

  /**
   * Follow findFirst
   */
  export interface FollowFindFirstArgs extends FollowFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Follow findFirstOrThrow
   */
  export type FollowFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowInclude | null
    /**
     * Filter, which Follow to fetch.
     */
    where?: FollowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Follows to fetch.
     */
    orderBy?: Enumerable<FollowOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Follows.
     */
    cursor?: FollowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Follows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Follows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Follows.
     */
    distinct?: Enumerable<FollowScalarFieldEnum>
  }


  /**
   * Follow findMany
   */
  export type FollowFindManyArgs = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowInclude | null
    /**
     * Filter, which Follows to fetch.
     */
    where?: FollowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Follows to fetch.
     */
    orderBy?: Enumerable<FollowOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Follows.
     */
    cursor?: FollowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Follows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Follows.
     */
    skip?: number
    distinct?: Enumerable<FollowScalarFieldEnum>
  }


  /**
   * Follow create
   */
  export type FollowCreateArgs = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowInclude | null
    /**
     * The data needed to create a Follow.
     */
    data: XOR<FollowCreateInput, FollowUncheckedCreateInput>
  }


  /**
   * Follow createMany
   */
  export type FollowCreateManyArgs = {
    /**
     * The data used to create many Follows.
     */
    data: Enumerable<FollowCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Follow update
   */
  export type FollowUpdateArgs = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowInclude | null
    /**
     * The data needed to update a Follow.
     */
    data: XOR<FollowUpdateInput, FollowUncheckedUpdateInput>
    /**
     * Choose, which Follow to update.
     */
    where: FollowWhereUniqueInput
  }


  /**
   * Follow updateMany
   */
  export type FollowUpdateManyArgs = {
    /**
     * The data used to update Follows.
     */
    data: XOR<FollowUpdateManyMutationInput, FollowUncheckedUpdateManyInput>
    /**
     * Filter which Follows to update
     */
    where?: FollowWhereInput
  }


  /**
   * Follow upsert
   */
  export type FollowUpsertArgs = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowInclude | null
    /**
     * The filter to search for the Follow to update in case it exists.
     */
    where: FollowWhereUniqueInput
    /**
     * In case the Follow found by the `where` argument doesn't exist, create a new Follow with this data.
     */
    create: XOR<FollowCreateInput, FollowUncheckedCreateInput>
    /**
     * In case the Follow was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FollowUpdateInput, FollowUncheckedUpdateInput>
  }


  /**
   * Follow delete
   */
  export type FollowDeleteArgs = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowInclude | null
    /**
     * Filter which Follow to delete.
     */
    where: FollowWhereUniqueInput
  }


  /**
   * Follow deleteMany
   */
  export type FollowDeleteManyArgs = {
    /**
     * Filter which Follows to delete
     */
    where?: FollowWhereInput
  }


  /**
   * Follow without action
   */
  export type FollowArgs = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    order: 'order',
    email: 'email',
    photo: 'photo',
    name: 'name',
    bio: 'bio'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const BlogScalarFieldEnum: {
    id: 'id',
    title: 'title',
    content: 'content',
    tags: 'tags',
    photo: 'photo',
    date: 'date',
    upvoted: 'upvoted',
    downvoted: 'downvoted',
    userId: 'userId'
  };

  export type BlogScalarFieldEnum = (typeof BlogScalarFieldEnum)[keyof typeof BlogScalarFieldEnum]


  export const UpvoteScalarFieldEnum: {
    userId: 'userId',
    blogId: 'blogId'
  };

  export type UpvoteScalarFieldEnum = (typeof UpvoteScalarFieldEnum)[keyof typeof UpvoteScalarFieldEnum]


  export const DownvoteScalarFieldEnum: {
    userId: 'userId',
    blogId: 'blogId'
  };

  export type DownvoteScalarFieldEnum = (typeof DownvoteScalarFieldEnum)[keyof typeof DownvoteScalarFieldEnum]


  export const ShareScalarFieldEnum: {
    userId: 'userId',
    blogId: 'blogId'
  };

  export type ShareScalarFieldEnum = (typeof ShareScalarFieldEnum)[keyof typeof ShareScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    content: 'content',
    date: 'date',
    liked: 'liked',
    like_count: 'like_count',
    userId: 'userId',
    blogId: 'blogId'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const HistoryScalarFieldEnum: {
    date: 'date',
    userId: 'userId',
    blogId: 'blogId'
  };

  export type HistoryScalarFieldEnum = (typeof HistoryScalarFieldEnum)[keyof typeof HistoryScalarFieldEnum]


  export const FollowScalarFieldEnum: {
    followerId: 'followerId',
    followingId: 'followingId'
  };

  export type FollowScalarFieldEnum = (typeof FollowScalarFieldEnum)[keyof typeof FollowScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    order?: IntFilter | number
    email?: StringNullableFilter | string | null
    photo?: StringNullableFilter | string | null
    name?: StringFilter | string
    bio?: StringNullableFilter | string | null
    blog?: BlogListRelationFilter
    history?: HistoryListRelationFilter
    comment?: CommentListRelationFilter
    upvote?: UpvoteListRelationFilter
    downvote?: DownvoteListRelationFilter
    share?: ShareListRelationFilter
    followedBy?: FollowListRelationFilter
    following?: FollowListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    order?: SortOrder
    email?: SortOrderInput | SortOrder
    photo?: SortOrderInput | SortOrder
    name?: SortOrder
    bio?: SortOrderInput | SortOrder
    blog?: BlogOrderByRelationAggregateInput
    history?: HistoryOrderByRelationAggregateInput
    comment?: CommentOrderByRelationAggregateInput
    upvote?: UpvoteOrderByRelationAggregateInput
    downvote?: DownvoteOrderByRelationAggregateInput
    share?: ShareOrderByRelationAggregateInput
    followedBy?: FollowOrderByRelationAggregateInput
    following?: FollowOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    order?: SortOrder
    email?: SortOrderInput | SortOrder
    photo?: SortOrderInput | SortOrder
    name?: SortOrder
    bio?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    order?: IntWithAggregatesFilter | number
    email?: StringNullableWithAggregatesFilter | string | null
    photo?: StringNullableWithAggregatesFilter | string | null
    name?: StringWithAggregatesFilter | string
    bio?: StringNullableWithAggregatesFilter | string | null
  }

  export type BlogWhereInput = {
    AND?: Enumerable<BlogWhereInput>
    OR?: Enumerable<BlogWhereInput>
    NOT?: Enumerable<BlogWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    content?: StringFilter | string
    tags?: StringNullableListFilter
    photo?: StringFilter | string
    date?: DateTimeFilter | Date | string
    upvoted?: BoolFilter | boolean
    downvoted?: BoolFilter | boolean
    userId?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    upvote?: UpvoteListRelationFilter
    downvote?: DownvoteListRelationFilter
    share?: ShareListRelationFilter
    comment?: CommentListRelationFilter
    history?: HistoryListRelationFilter
  }

  export type BlogOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    tags?: SortOrder
    photo?: SortOrder
    date?: SortOrder
    upvoted?: SortOrder
    downvoted?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    upvote?: UpvoteOrderByRelationAggregateInput
    downvote?: DownvoteOrderByRelationAggregateInput
    share?: ShareOrderByRelationAggregateInput
    comment?: CommentOrderByRelationAggregateInput
    history?: HistoryOrderByRelationAggregateInput
  }

  export type BlogWhereUniqueInput = {
    id?: number
  }

  export type BlogOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    tags?: SortOrder
    photo?: SortOrder
    date?: SortOrder
    upvoted?: SortOrder
    downvoted?: SortOrder
    userId?: SortOrder
    _count?: BlogCountOrderByAggregateInput
    _avg?: BlogAvgOrderByAggregateInput
    _max?: BlogMaxOrderByAggregateInput
    _min?: BlogMinOrderByAggregateInput
    _sum?: BlogSumOrderByAggregateInput
  }

  export type BlogScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BlogScalarWhereWithAggregatesInput>
    OR?: Enumerable<BlogScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BlogScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    content?: StringWithAggregatesFilter | string
    tags?: StringNullableListFilter
    photo?: StringWithAggregatesFilter | string
    date?: DateTimeWithAggregatesFilter | Date | string
    upvoted?: BoolWithAggregatesFilter | boolean
    downvoted?: BoolWithAggregatesFilter | boolean
    userId?: StringWithAggregatesFilter | string
  }

  export type UpvoteWhereInput = {
    AND?: Enumerable<UpvoteWhereInput>
    OR?: Enumerable<UpvoteWhereInput>
    NOT?: Enumerable<UpvoteWhereInput>
    userId?: StringFilter | string
    blogId?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    blog?: XOR<BlogRelationFilter, BlogWhereInput>
  }

  export type UpvoteOrderByWithRelationInput = {
    userId?: SortOrder
    blogId?: SortOrder
    user?: UserOrderByWithRelationInput
    blog?: BlogOrderByWithRelationInput
  }

  export type UpvoteWhereUniqueInput = {
    userId_blogId?: UpvoteUserIdBlogIdCompoundUniqueInput
  }

  export type UpvoteOrderByWithAggregationInput = {
    userId?: SortOrder
    blogId?: SortOrder
    _count?: UpvoteCountOrderByAggregateInput
    _avg?: UpvoteAvgOrderByAggregateInput
    _max?: UpvoteMaxOrderByAggregateInput
    _min?: UpvoteMinOrderByAggregateInput
    _sum?: UpvoteSumOrderByAggregateInput
  }

  export type UpvoteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UpvoteScalarWhereWithAggregatesInput>
    OR?: Enumerable<UpvoteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UpvoteScalarWhereWithAggregatesInput>
    userId?: StringWithAggregatesFilter | string
    blogId?: IntWithAggregatesFilter | number
  }

  export type DownvoteWhereInput = {
    AND?: Enumerable<DownvoteWhereInput>
    OR?: Enumerable<DownvoteWhereInput>
    NOT?: Enumerable<DownvoteWhereInput>
    userId?: StringFilter | string
    blogId?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    blog?: XOR<BlogRelationFilter, BlogWhereInput>
  }

  export type DownvoteOrderByWithRelationInput = {
    userId?: SortOrder
    blogId?: SortOrder
    user?: UserOrderByWithRelationInput
    blog?: BlogOrderByWithRelationInput
  }

  export type DownvoteWhereUniqueInput = {
    userId_blogId?: DownvoteUserIdBlogIdCompoundUniqueInput
  }

  export type DownvoteOrderByWithAggregationInput = {
    userId?: SortOrder
    blogId?: SortOrder
    _count?: DownvoteCountOrderByAggregateInput
    _avg?: DownvoteAvgOrderByAggregateInput
    _max?: DownvoteMaxOrderByAggregateInput
    _min?: DownvoteMinOrderByAggregateInput
    _sum?: DownvoteSumOrderByAggregateInput
  }

  export type DownvoteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DownvoteScalarWhereWithAggregatesInput>
    OR?: Enumerable<DownvoteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DownvoteScalarWhereWithAggregatesInput>
    userId?: StringWithAggregatesFilter | string
    blogId?: IntWithAggregatesFilter | number
  }

  export type ShareWhereInput = {
    AND?: Enumerable<ShareWhereInput>
    OR?: Enumerable<ShareWhereInput>
    NOT?: Enumerable<ShareWhereInput>
    userId?: StringFilter | string
    blogId?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    blog?: XOR<BlogRelationFilter, BlogWhereInput>
  }

  export type ShareOrderByWithRelationInput = {
    userId?: SortOrder
    blogId?: SortOrder
    user?: UserOrderByWithRelationInput
    blog?: BlogOrderByWithRelationInput
  }

  export type ShareWhereUniqueInput = {
    userId_blogId?: ShareUserIdBlogIdCompoundUniqueInput
  }

  export type ShareOrderByWithAggregationInput = {
    userId?: SortOrder
    blogId?: SortOrder
    _count?: ShareCountOrderByAggregateInput
    _avg?: ShareAvgOrderByAggregateInput
    _max?: ShareMaxOrderByAggregateInput
    _min?: ShareMinOrderByAggregateInput
    _sum?: ShareSumOrderByAggregateInput
  }

  export type ShareScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ShareScalarWhereWithAggregatesInput>
    OR?: Enumerable<ShareScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ShareScalarWhereWithAggregatesInput>
    userId?: StringWithAggregatesFilter | string
    blogId?: IntWithAggregatesFilter | number
  }

  export type CommentWhereInput = {
    AND?: Enumerable<CommentWhereInput>
    OR?: Enumerable<CommentWhereInput>
    NOT?: Enumerable<CommentWhereInput>
    id?: IntFilter | number
    content?: StringFilter | string
    date?: DateTimeFilter | Date | string
    liked?: BoolFilter | boolean
    like_count?: IntFilter | number
    userId?: StringFilter | string
    blogId?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    blog?: XOR<BlogRelationFilter, BlogWhereInput>
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    date?: SortOrder
    liked?: SortOrder
    like_count?: SortOrder
    userId?: SortOrder
    blogId?: SortOrder
    user?: UserOrderByWithRelationInput
    blog?: BlogOrderByWithRelationInput
  }

  export type CommentWhereUniqueInput = {
    id?: number
  }

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    date?: SortOrder
    liked?: SortOrder
    like_count?: SortOrder
    userId?: SortOrder
    blogId?: SortOrder
    _count?: CommentCountOrderByAggregateInput
    _avg?: CommentAvgOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
    _sum?: CommentSumOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CommentScalarWhereWithAggregatesInput>
    OR?: Enumerable<CommentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CommentScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    content?: StringWithAggregatesFilter | string
    date?: DateTimeWithAggregatesFilter | Date | string
    liked?: BoolWithAggregatesFilter | boolean
    like_count?: IntWithAggregatesFilter | number
    userId?: StringWithAggregatesFilter | string
    blogId?: IntWithAggregatesFilter | number
  }

  export type HistoryWhereInput = {
    AND?: Enumerable<HistoryWhereInput>
    OR?: Enumerable<HistoryWhereInput>
    NOT?: Enumerable<HistoryWhereInput>
    date?: DateTimeFilter | Date | string
    userId?: StringFilter | string
    blogId?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    blog?: XOR<BlogRelationFilter, BlogWhereInput>
  }

  export type HistoryOrderByWithRelationInput = {
    date?: SortOrder
    userId?: SortOrder
    blogId?: SortOrder
    user?: UserOrderByWithRelationInput
    blog?: BlogOrderByWithRelationInput
  }

  export type HistoryWhereUniqueInput = {
    userId_blogId?: HistoryUserIdBlogIdCompoundUniqueInput
  }

  export type HistoryOrderByWithAggregationInput = {
    date?: SortOrder
    userId?: SortOrder
    blogId?: SortOrder
    _count?: HistoryCountOrderByAggregateInput
    _avg?: HistoryAvgOrderByAggregateInput
    _max?: HistoryMaxOrderByAggregateInput
    _min?: HistoryMinOrderByAggregateInput
    _sum?: HistorySumOrderByAggregateInput
  }

  export type HistoryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<HistoryScalarWhereWithAggregatesInput>
    OR?: Enumerable<HistoryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<HistoryScalarWhereWithAggregatesInput>
    date?: DateTimeWithAggregatesFilter | Date | string
    userId?: StringWithAggregatesFilter | string
    blogId?: IntWithAggregatesFilter | number
  }

  export type FollowWhereInput = {
    AND?: Enumerable<FollowWhereInput>
    OR?: Enumerable<FollowWhereInput>
    NOT?: Enumerable<FollowWhereInput>
    followerId?: StringFilter | string
    followingId?: StringFilter | string
    follower?: XOR<UserRelationFilter, UserWhereInput>
    following?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type FollowOrderByWithRelationInput = {
    followerId?: SortOrder
    followingId?: SortOrder
    follower?: UserOrderByWithRelationInput
    following?: UserOrderByWithRelationInput
  }

  export type FollowWhereUniqueInput = {
    followerId_followingId?: FollowFollowerIdFollowingIdCompoundUniqueInput
  }

  export type FollowOrderByWithAggregationInput = {
    followerId?: SortOrder
    followingId?: SortOrder
    _count?: FollowCountOrderByAggregateInput
    _max?: FollowMaxOrderByAggregateInput
    _min?: FollowMinOrderByAggregateInput
  }

  export type FollowScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FollowScalarWhereWithAggregatesInput>
    OR?: Enumerable<FollowScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FollowScalarWhereWithAggregatesInput>
    followerId?: StringWithAggregatesFilter | string
    followingId?: StringWithAggregatesFilter | string
  }

  export type UserCreateInput = {
    id: string
    order?: number
    email?: string | null
    photo?: string | null
    name: string
    bio?: string | null
    blog?: BlogCreateNestedManyWithoutUserInput
    history?: HistoryCreateNestedManyWithoutUserInput
    comment?: CommentCreateNestedManyWithoutUserInput
    upvote?: UpvoteCreateNestedManyWithoutUserInput
    downvote?: DownvoteCreateNestedManyWithoutUserInput
    share?: ShareCreateNestedManyWithoutUserInput
    followedBy?: FollowCreateNestedManyWithoutFollowingInput
    following?: FollowCreateNestedManyWithoutFollowerInput
  }

  export type UserUncheckedCreateInput = {
    id: string
    order?: number
    email?: string | null
    photo?: string | null
    name: string
    bio?: string | null
    blog?: BlogUncheckedCreateNestedManyWithoutUserInput
    history?: HistoryUncheckedCreateNestedManyWithoutUserInput
    comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    upvote?: UpvoteUncheckedCreateNestedManyWithoutUserInput
    downvote?: DownvoteUncheckedCreateNestedManyWithoutUserInput
    share?: ShareUncheckedCreateNestedManyWithoutUserInput
    followedBy?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    blog?: BlogUpdateManyWithoutUserNestedInput
    history?: HistoryUpdateManyWithoutUserNestedInput
    comment?: CommentUpdateManyWithoutUserNestedInput
    upvote?: UpvoteUpdateManyWithoutUserNestedInput
    downvote?: DownvoteUpdateManyWithoutUserNestedInput
    share?: ShareUpdateManyWithoutUserNestedInput
    followedBy?: FollowUpdateManyWithoutFollowingNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    blog?: BlogUncheckedUpdateManyWithoutUserNestedInput
    history?: HistoryUncheckedUpdateManyWithoutUserNestedInput
    comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    upvote?: UpvoteUncheckedUpdateManyWithoutUserNestedInput
    downvote?: DownvoteUncheckedUpdateManyWithoutUserNestedInput
    share?: ShareUncheckedUpdateManyWithoutUserNestedInput
    followedBy?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
  }

  export type UserCreateManyInput = {
    id: string
    order?: number
    email?: string | null
    photo?: string | null
    name: string
    bio?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BlogCreateInput = {
    title: string
    content: string
    tags?: BlogCreatetagsInput | Enumerable<string>
    photo: string
    date?: Date | string
    upvoted?: boolean
    downvoted?: boolean
    user: UserCreateNestedOneWithoutBlogInput
    upvote?: UpvoteCreateNestedManyWithoutBlogInput
    downvote?: DownvoteCreateNestedManyWithoutBlogInput
    share?: ShareCreateNestedManyWithoutBlogInput
    comment?: CommentCreateNestedManyWithoutBlogInput
    history?: HistoryCreateNestedManyWithoutBlogInput
  }

  export type BlogUncheckedCreateInput = {
    id?: number
    title: string
    content: string
    tags?: BlogCreatetagsInput | Enumerable<string>
    photo: string
    date?: Date | string
    upvoted?: boolean
    downvoted?: boolean
    userId: string
    upvote?: UpvoteUncheckedCreateNestedManyWithoutBlogInput
    downvote?: DownvoteUncheckedCreateNestedManyWithoutBlogInput
    share?: ShareUncheckedCreateNestedManyWithoutBlogInput
    comment?: CommentUncheckedCreateNestedManyWithoutBlogInput
    history?: HistoryUncheckedCreateNestedManyWithoutBlogInput
  }

  export type BlogUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tags?: BlogUpdatetagsInput | Enumerable<string>
    photo?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    upvoted?: BoolFieldUpdateOperationsInput | boolean
    downvoted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutBlogNestedInput
    upvote?: UpvoteUpdateManyWithoutBlogNestedInput
    downvote?: DownvoteUpdateManyWithoutBlogNestedInput
    share?: ShareUpdateManyWithoutBlogNestedInput
    comment?: CommentUpdateManyWithoutBlogNestedInput
    history?: HistoryUpdateManyWithoutBlogNestedInput
  }

  export type BlogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tags?: BlogUpdatetagsInput | Enumerable<string>
    photo?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    upvoted?: BoolFieldUpdateOperationsInput | boolean
    downvoted?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    upvote?: UpvoteUncheckedUpdateManyWithoutBlogNestedInput
    downvote?: DownvoteUncheckedUpdateManyWithoutBlogNestedInput
    share?: ShareUncheckedUpdateManyWithoutBlogNestedInput
    comment?: CommentUncheckedUpdateManyWithoutBlogNestedInput
    history?: HistoryUncheckedUpdateManyWithoutBlogNestedInput
  }

  export type BlogCreateManyInput = {
    id?: number
    title: string
    content: string
    tags?: BlogCreatetagsInput | Enumerable<string>
    photo: string
    date?: Date | string
    upvoted?: boolean
    downvoted?: boolean
    userId: string
  }

  export type BlogUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tags?: BlogUpdatetagsInput | Enumerable<string>
    photo?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    upvoted?: BoolFieldUpdateOperationsInput | boolean
    downvoted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BlogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tags?: BlogUpdatetagsInput | Enumerable<string>
    photo?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    upvoted?: BoolFieldUpdateOperationsInput | boolean
    downvoted?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UpvoteCreateInput = {
    user: UserCreateNestedOneWithoutUpvoteInput
    blog: BlogCreateNestedOneWithoutUpvoteInput
  }

  export type UpvoteUncheckedCreateInput = {
    userId: string
    blogId: number
  }

  export type UpvoteUpdateInput = {
    user?: UserUpdateOneRequiredWithoutUpvoteNestedInput
    blog?: BlogUpdateOneRequiredWithoutUpvoteNestedInput
  }

  export type UpvoteUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    blogId?: IntFieldUpdateOperationsInput | number
  }

  export type UpvoteCreateManyInput = {
    userId: string
    blogId: number
  }

  export type UpvoteUpdateManyMutationInput = {

  }

  export type UpvoteUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    blogId?: IntFieldUpdateOperationsInput | number
  }

  export type DownvoteCreateInput = {
    user: UserCreateNestedOneWithoutDownvoteInput
    blog: BlogCreateNestedOneWithoutDownvoteInput
  }

  export type DownvoteUncheckedCreateInput = {
    userId: string
    blogId: number
  }

  export type DownvoteUpdateInput = {
    user?: UserUpdateOneRequiredWithoutDownvoteNestedInput
    blog?: BlogUpdateOneRequiredWithoutDownvoteNestedInput
  }

  export type DownvoteUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    blogId?: IntFieldUpdateOperationsInput | number
  }

  export type DownvoteCreateManyInput = {
    userId: string
    blogId: number
  }

  export type DownvoteUpdateManyMutationInput = {

  }

  export type DownvoteUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    blogId?: IntFieldUpdateOperationsInput | number
  }

  export type ShareCreateInput = {
    user: UserCreateNestedOneWithoutShareInput
    blog: BlogCreateNestedOneWithoutShareInput
  }

  export type ShareUncheckedCreateInput = {
    userId: string
    blogId: number
  }

  export type ShareUpdateInput = {
    user?: UserUpdateOneRequiredWithoutShareNestedInput
    blog?: BlogUpdateOneRequiredWithoutShareNestedInput
  }

  export type ShareUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    blogId?: IntFieldUpdateOperationsInput | number
  }

  export type ShareCreateManyInput = {
    userId: string
    blogId: number
  }

  export type ShareUpdateManyMutationInput = {

  }

  export type ShareUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    blogId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentCreateInput = {
    content: string
    date?: Date | string
    liked?: boolean
    like_count?: number
    user: UserCreateNestedOneWithoutCommentInput
    blog: BlogCreateNestedOneWithoutCommentInput
  }

  export type CommentUncheckedCreateInput = {
    id?: number
    content: string
    date?: Date | string
    liked?: boolean
    like_count?: number
    userId: string
    blogId: number
  }

  export type CommentUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    liked?: BoolFieldUpdateOperationsInput | boolean
    like_count?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutCommentNestedInput
    blog?: BlogUpdateOneRequiredWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    liked?: BoolFieldUpdateOperationsInput | boolean
    like_count?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    blogId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentCreateManyInput = {
    id?: number
    content: string
    date?: Date | string
    liked?: boolean
    like_count?: number
    userId: string
    blogId: number
  }

  export type CommentUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    liked?: BoolFieldUpdateOperationsInput | boolean
    like_count?: IntFieldUpdateOperationsInput | number
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    liked?: BoolFieldUpdateOperationsInput | boolean
    like_count?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    blogId?: IntFieldUpdateOperationsInput | number
  }

  export type HistoryCreateInput = {
    date?: Date | string
    user: UserCreateNestedOneWithoutHistoryInput
    blog: BlogCreateNestedOneWithoutHistoryInput
  }

  export type HistoryUncheckedCreateInput = {
    date?: Date | string
    userId: string
    blogId: number
  }

  export type HistoryUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutHistoryNestedInput
    blog?: BlogUpdateOneRequiredWithoutHistoryNestedInput
  }

  export type HistoryUncheckedUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    blogId?: IntFieldUpdateOperationsInput | number
  }

  export type HistoryCreateManyInput = {
    date?: Date | string
    userId: string
    blogId: number
  }

  export type HistoryUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HistoryUncheckedUpdateManyInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    blogId?: IntFieldUpdateOperationsInput | number
  }

  export type FollowCreateInput = {
    follower: UserCreateNestedOneWithoutFollowingInput
    following: UserCreateNestedOneWithoutFollowedByInput
  }

  export type FollowUncheckedCreateInput = {
    followerId: string
    followingId: string
  }

  export type FollowUpdateInput = {
    follower?: UserUpdateOneRequiredWithoutFollowingNestedInput
    following?: UserUpdateOneRequiredWithoutFollowedByNestedInput
  }

  export type FollowUncheckedUpdateInput = {
    followerId?: StringFieldUpdateOperationsInput | string
    followingId?: StringFieldUpdateOperationsInput | string
  }

  export type FollowCreateManyInput = {
    followerId: string
    followingId: string
  }

  export type FollowUpdateManyMutationInput = {

  }

  export type FollowUncheckedUpdateManyInput = {
    followerId?: StringFieldUpdateOperationsInput | string
    followingId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type BlogListRelationFilter = {
    every?: BlogWhereInput
    some?: BlogWhereInput
    none?: BlogWhereInput
  }

  export type HistoryListRelationFilter = {
    every?: HistoryWhereInput
    some?: HistoryWhereInput
    none?: HistoryWhereInput
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type UpvoteListRelationFilter = {
    every?: UpvoteWhereInput
    some?: UpvoteWhereInput
    none?: UpvoteWhereInput
  }

  export type DownvoteListRelationFilter = {
    every?: DownvoteWhereInput
    some?: DownvoteWhereInput
    none?: DownvoteWhereInput
  }

  export type ShareListRelationFilter = {
    every?: ShareWhereInput
    some?: ShareWhereInput
    none?: ShareWhereInput
  }

  export type FollowListRelationFilter = {
    every?: FollowWhereInput
    some?: FollowWhereInput
    none?: FollowWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type BlogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UpvoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DownvoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ShareOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FollowOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    order?: SortOrder
    email?: SortOrder
    photo?: SortOrder
    name?: SortOrder
    bio?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    order?: SortOrder
    email?: SortOrder
    photo?: SortOrder
    name?: SortOrder
    bio?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    order?: SortOrder
    email?: SortOrder
    photo?: SortOrder
    name?: SortOrder
    bio?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    order?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type StringNullableListFilter = {
    equals?: Enumerable<string> | null
    has?: string | null
    hasEvery?: Enumerable<string>
    hasSome?: Enumerable<string>
    isEmpty?: boolean
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type UserRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type BlogCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    tags?: SortOrder
    photo?: SortOrder
    date?: SortOrder
    upvoted?: SortOrder
    downvoted?: SortOrder
    userId?: SortOrder
  }

  export type BlogAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BlogMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    photo?: SortOrder
    date?: SortOrder
    upvoted?: SortOrder
    downvoted?: SortOrder
    userId?: SortOrder
  }

  export type BlogMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    photo?: SortOrder
    date?: SortOrder
    upvoted?: SortOrder
    downvoted?: SortOrder
    userId?: SortOrder
  }

  export type BlogSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type BlogRelationFilter = {
    is?: BlogWhereInput | null
    isNot?: BlogWhereInput | null
  }

  export type UpvoteUserIdBlogIdCompoundUniqueInput = {
    userId: string
    blogId: number
  }

  export type UpvoteCountOrderByAggregateInput = {
    userId?: SortOrder
    blogId?: SortOrder
  }

  export type UpvoteAvgOrderByAggregateInput = {
    blogId?: SortOrder
  }

  export type UpvoteMaxOrderByAggregateInput = {
    userId?: SortOrder
    blogId?: SortOrder
  }

  export type UpvoteMinOrderByAggregateInput = {
    userId?: SortOrder
    blogId?: SortOrder
  }

  export type UpvoteSumOrderByAggregateInput = {
    blogId?: SortOrder
  }

  export type DownvoteUserIdBlogIdCompoundUniqueInput = {
    userId: string
    blogId: number
  }

  export type DownvoteCountOrderByAggregateInput = {
    userId?: SortOrder
    blogId?: SortOrder
  }

  export type DownvoteAvgOrderByAggregateInput = {
    blogId?: SortOrder
  }

  export type DownvoteMaxOrderByAggregateInput = {
    userId?: SortOrder
    blogId?: SortOrder
  }

  export type DownvoteMinOrderByAggregateInput = {
    userId?: SortOrder
    blogId?: SortOrder
  }

  export type DownvoteSumOrderByAggregateInput = {
    blogId?: SortOrder
  }

  export type ShareUserIdBlogIdCompoundUniqueInput = {
    userId: string
    blogId: number
  }

  export type ShareCountOrderByAggregateInput = {
    userId?: SortOrder
    blogId?: SortOrder
  }

  export type ShareAvgOrderByAggregateInput = {
    blogId?: SortOrder
  }

  export type ShareMaxOrderByAggregateInput = {
    userId?: SortOrder
    blogId?: SortOrder
  }

  export type ShareMinOrderByAggregateInput = {
    userId?: SortOrder
    blogId?: SortOrder
  }

  export type ShareSumOrderByAggregateInput = {
    blogId?: SortOrder
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    date?: SortOrder
    liked?: SortOrder
    like_count?: SortOrder
    userId?: SortOrder
    blogId?: SortOrder
  }

  export type CommentAvgOrderByAggregateInput = {
    id?: SortOrder
    like_count?: SortOrder
    blogId?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    date?: SortOrder
    liked?: SortOrder
    like_count?: SortOrder
    userId?: SortOrder
    blogId?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    date?: SortOrder
    liked?: SortOrder
    like_count?: SortOrder
    userId?: SortOrder
    blogId?: SortOrder
  }

  export type CommentSumOrderByAggregateInput = {
    id?: SortOrder
    like_count?: SortOrder
    blogId?: SortOrder
  }

  export type HistoryUserIdBlogIdCompoundUniqueInput = {
    userId: string
    blogId: number
  }

  export type HistoryCountOrderByAggregateInput = {
    date?: SortOrder
    userId?: SortOrder
    blogId?: SortOrder
  }

  export type HistoryAvgOrderByAggregateInput = {
    blogId?: SortOrder
  }

  export type HistoryMaxOrderByAggregateInput = {
    date?: SortOrder
    userId?: SortOrder
    blogId?: SortOrder
  }

  export type HistoryMinOrderByAggregateInput = {
    date?: SortOrder
    userId?: SortOrder
    blogId?: SortOrder
  }

  export type HistorySumOrderByAggregateInput = {
    blogId?: SortOrder
  }

  export type FollowFollowerIdFollowingIdCompoundUniqueInput = {
    followerId: string
    followingId: string
  }

  export type FollowCountOrderByAggregateInput = {
    followerId?: SortOrder
    followingId?: SortOrder
  }

  export type FollowMaxOrderByAggregateInput = {
    followerId?: SortOrder
    followingId?: SortOrder
  }

  export type FollowMinOrderByAggregateInput = {
    followerId?: SortOrder
    followingId?: SortOrder
  }

  export type BlogCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<BlogCreateWithoutUserInput>, Enumerable<BlogUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<BlogCreateOrConnectWithoutUserInput>
    createMany?: BlogCreateManyUserInputEnvelope
    connect?: Enumerable<BlogWhereUniqueInput>
  }

  export type HistoryCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<HistoryCreateWithoutUserInput>, Enumerable<HistoryUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<HistoryCreateOrConnectWithoutUserInput>
    createMany?: HistoryCreateManyUserInputEnvelope
    connect?: Enumerable<HistoryWhereUniqueInput>
  }

  export type CommentCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<CommentCreateWithoutUserInput>, Enumerable<CommentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutUserInput>
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: Enumerable<CommentWhereUniqueInput>
  }

  export type UpvoteCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UpvoteCreateWithoutUserInput>, Enumerable<UpvoteUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UpvoteCreateOrConnectWithoutUserInput>
    createMany?: UpvoteCreateManyUserInputEnvelope
    connect?: Enumerable<UpvoteWhereUniqueInput>
  }

  export type DownvoteCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<DownvoteCreateWithoutUserInput>, Enumerable<DownvoteUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<DownvoteCreateOrConnectWithoutUserInput>
    createMany?: DownvoteCreateManyUserInputEnvelope
    connect?: Enumerable<DownvoteWhereUniqueInput>
  }

  export type ShareCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ShareCreateWithoutUserInput>, Enumerable<ShareUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ShareCreateOrConnectWithoutUserInput>
    createMany?: ShareCreateManyUserInputEnvelope
    connect?: Enumerable<ShareWhereUniqueInput>
  }

  export type FollowCreateNestedManyWithoutFollowingInput = {
    create?: XOR<Enumerable<FollowCreateWithoutFollowingInput>, Enumerable<FollowUncheckedCreateWithoutFollowingInput>>
    connectOrCreate?: Enumerable<FollowCreateOrConnectWithoutFollowingInput>
    createMany?: FollowCreateManyFollowingInputEnvelope
    connect?: Enumerable<FollowWhereUniqueInput>
  }

  export type FollowCreateNestedManyWithoutFollowerInput = {
    create?: XOR<Enumerable<FollowCreateWithoutFollowerInput>, Enumerable<FollowUncheckedCreateWithoutFollowerInput>>
    connectOrCreate?: Enumerable<FollowCreateOrConnectWithoutFollowerInput>
    createMany?: FollowCreateManyFollowerInputEnvelope
    connect?: Enumerable<FollowWhereUniqueInput>
  }

  export type BlogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<BlogCreateWithoutUserInput>, Enumerable<BlogUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<BlogCreateOrConnectWithoutUserInput>
    createMany?: BlogCreateManyUserInputEnvelope
    connect?: Enumerable<BlogWhereUniqueInput>
  }

  export type HistoryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<HistoryCreateWithoutUserInput>, Enumerable<HistoryUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<HistoryCreateOrConnectWithoutUserInput>
    createMany?: HistoryCreateManyUserInputEnvelope
    connect?: Enumerable<HistoryWhereUniqueInput>
  }

  export type CommentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<CommentCreateWithoutUserInput>, Enumerable<CommentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutUserInput>
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: Enumerable<CommentWhereUniqueInput>
  }

  export type UpvoteUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UpvoteCreateWithoutUserInput>, Enumerable<UpvoteUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UpvoteCreateOrConnectWithoutUserInput>
    createMany?: UpvoteCreateManyUserInputEnvelope
    connect?: Enumerable<UpvoteWhereUniqueInput>
  }

  export type DownvoteUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<DownvoteCreateWithoutUserInput>, Enumerable<DownvoteUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<DownvoteCreateOrConnectWithoutUserInput>
    createMany?: DownvoteCreateManyUserInputEnvelope
    connect?: Enumerable<DownvoteWhereUniqueInput>
  }

  export type ShareUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ShareCreateWithoutUserInput>, Enumerable<ShareUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ShareCreateOrConnectWithoutUserInput>
    createMany?: ShareCreateManyUserInputEnvelope
    connect?: Enumerable<ShareWhereUniqueInput>
  }

  export type FollowUncheckedCreateNestedManyWithoutFollowingInput = {
    create?: XOR<Enumerable<FollowCreateWithoutFollowingInput>, Enumerable<FollowUncheckedCreateWithoutFollowingInput>>
    connectOrCreate?: Enumerable<FollowCreateOrConnectWithoutFollowingInput>
    createMany?: FollowCreateManyFollowingInputEnvelope
    connect?: Enumerable<FollowWhereUniqueInput>
  }

  export type FollowUncheckedCreateNestedManyWithoutFollowerInput = {
    create?: XOR<Enumerable<FollowCreateWithoutFollowerInput>, Enumerable<FollowUncheckedCreateWithoutFollowerInput>>
    connectOrCreate?: Enumerable<FollowCreateOrConnectWithoutFollowerInput>
    createMany?: FollowCreateManyFollowerInputEnvelope
    connect?: Enumerable<FollowWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BlogUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<BlogCreateWithoutUserInput>, Enumerable<BlogUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<BlogCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<BlogUpsertWithWhereUniqueWithoutUserInput>
    createMany?: BlogCreateManyUserInputEnvelope
    set?: Enumerable<BlogWhereUniqueInput>
    disconnect?: Enumerable<BlogWhereUniqueInput>
    delete?: Enumerable<BlogWhereUniqueInput>
    connect?: Enumerable<BlogWhereUniqueInput>
    update?: Enumerable<BlogUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<BlogUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<BlogScalarWhereInput>
  }

  export type HistoryUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<HistoryCreateWithoutUserInput>, Enumerable<HistoryUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<HistoryCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<HistoryUpsertWithWhereUniqueWithoutUserInput>
    createMany?: HistoryCreateManyUserInputEnvelope
    set?: Enumerable<HistoryWhereUniqueInput>
    disconnect?: Enumerable<HistoryWhereUniqueInput>
    delete?: Enumerable<HistoryWhereUniqueInput>
    connect?: Enumerable<HistoryWhereUniqueInput>
    update?: Enumerable<HistoryUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<HistoryUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<HistoryScalarWhereInput>
  }

  export type CommentUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<CommentCreateWithoutUserInput>, Enumerable<CommentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<CommentUpsertWithWhereUniqueWithoutUserInput>
    createMany?: CommentCreateManyUserInputEnvelope
    set?: Enumerable<CommentWhereUniqueInput>
    disconnect?: Enumerable<CommentWhereUniqueInput>
    delete?: Enumerable<CommentWhereUniqueInput>
    connect?: Enumerable<CommentWhereUniqueInput>
    update?: Enumerable<CommentUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<CommentUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<CommentScalarWhereInput>
  }

  export type UpvoteUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<UpvoteCreateWithoutUserInput>, Enumerable<UpvoteUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UpvoteCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UpvoteUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UpvoteCreateManyUserInputEnvelope
    set?: Enumerable<UpvoteWhereUniqueInput>
    disconnect?: Enumerable<UpvoteWhereUniqueInput>
    delete?: Enumerable<UpvoteWhereUniqueInput>
    connect?: Enumerable<UpvoteWhereUniqueInput>
    update?: Enumerable<UpvoteUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UpvoteUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UpvoteScalarWhereInput>
  }

  export type DownvoteUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<DownvoteCreateWithoutUserInput>, Enumerable<DownvoteUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<DownvoteCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<DownvoteUpsertWithWhereUniqueWithoutUserInput>
    createMany?: DownvoteCreateManyUserInputEnvelope
    set?: Enumerable<DownvoteWhereUniqueInput>
    disconnect?: Enumerable<DownvoteWhereUniqueInput>
    delete?: Enumerable<DownvoteWhereUniqueInput>
    connect?: Enumerable<DownvoteWhereUniqueInput>
    update?: Enumerable<DownvoteUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<DownvoteUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<DownvoteScalarWhereInput>
  }

  export type ShareUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ShareCreateWithoutUserInput>, Enumerable<ShareUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ShareCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ShareUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ShareCreateManyUserInputEnvelope
    set?: Enumerable<ShareWhereUniqueInput>
    disconnect?: Enumerable<ShareWhereUniqueInput>
    delete?: Enumerable<ShareWhereUniqueInput>
    connect?: Enumerable<ShareWhereUniqueInput>
    update?: Enumerable<ShareUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ShareUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ShareScalarWhereInput>
  }

  export type FollowUpdateManyWithoutFollowingNestedInput = {
    create?: XOR<Enumerable<FollowCreateWithoutFollowingInput>, Enumerable<FollowUncheckedCreateWithoutFollowingInput>>
    connectOrCreate?: Enumerable<FollowCreateOrConnectWithoutFollowingInput>
    upsert?: Enumerable<FollowUpsertWithWhereUniqueWithoutFollowingInput>
    createMany?: FollowCreateManyFollowingInputEnvelope
    set?: Enumerable<FollowWhereUniqueInput>
    disconnect?: Enumerable<FollowWhereUniqueInput>
    delete?: Enumerable<FollowWhereUniqueInput>
    connect?: Enumerable<FollowWhereUniqueInput>
    update?: Enumerable<FollowUpdateWithWhereUniqueWithoutFollowingInput>
    updateMany?: Enumerable<FollowUpdateManyWithWhereWithoutFollowingInput>
    deleteMany?: Enumerable<FollowScalarWhereInput>
  }

  export type FollowUpdateManyWithoutFollowerNestedInput = {
    create?: XOR<Enumerable<FollowCreateWithoutFollowerInput>, Enumerable<FollowUncheckedCreateWithoutFollowerInput>>
    connectOrCreate?: Enumerable<FollowCreateOrConnectWithoutFollowerInput>
    upsert?: Enumerable<FollowUpsertWithWhereUniqueWithoutFollowerInput>
    createMany?: FollowCreateManyFollowerInputEnvelope
    set?: Enumerable<FollowWhereUniqueInput>
    disconnect?: Enumerable<FollowWhereUniqueInput>
    delete?: Enumerable<FollowWhereUniqueInput>
    connect?: Enumerable<FollowWhereUniqueInput>
    update?: Enumerable<FollowUpdateWithWhereUniqueWithoutFollowerInput>
    updateMany?: Enumerable<FollowUpdateManyWithWhereWithoutFollowerInput>
    deleteMany?: Enumerable<FollowScalarWhereInput>
  }

  export type BlogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<BlogCreateWithoutUserInput>, Enumerable<BlogUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<BlogCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<BlogUpsertWithWhereUniqueWithoutUserInput>
    createMany?: BlogCreateManyUserInputEnvelope
    set?: Enumerable<BlogWhereUniqueInput>
    disconnect?: Enumerable<BlogWhereUniqueInput>
    delete?: Enumerable<BlogWhereUniqueInput>
    connect?: Enumerable<BlogWhereUniqueInput>
    update?: Enumerable<BlogUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<BlogUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<BlogScalarWhereInput>
  }

  export type HistoryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<HistoryCreateWithoutUserInput>, Enumerable<HistoryUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<HistoryCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<HistoryUpsertWithWhereUniqueWithoutUserInput>
    createMany?: HistoryCreateManyUserInputEnvelope
    set?: Enumerable<HistoryWhereUniqueInput>
    disconnect?: Enumerable<HistoryWhereUniqueInput>
    delete?: Enumerable<HistoryWhereUniqueInput>
    connect?: Enumerable<HistoryWhereUniqueInput>
    update?: Enumerable<HistoryUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<HistoryUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<HistoryScalarWhereInput>
  }

  export type CommentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<CommentCreateWithoutUserInput>, Enumerable<CommentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<CommentUpsertWithWhereUniqueWithoutUserInput>
    createMany?: CommentCreateManyUserInputEnvelope
    set?: Enumerable<CommentWhereUniqueInput>
    disconnect?: Enumerable<CommentWhereUniqueInput>
    delete?: Enumerable<CommentWhereUniqueInput>
    connect?: Enumerable<CommentWhereUniqueInput>
    update?: Enumerable<CommentUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<CommentUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<CommentScalarWhereInput>
  }

  export type UpvoteUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<UpvoteCreateWithoutUserInput>, Enumerable<UpvoteUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UpvoteCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UpvoteUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UpvoteCreateManyUserInputEnvelope
    set?: Enumerable<UpvoteWhereUniqueInput>
    disconnect?: Enumerable<UpvoteWhereUniqueInput>
    delete?: Enumerable<UpvoteWhereUniqueInput>
    connect?: Enumerable<UpvoteWhereUniqueInput>
    update?: Enumerable<UpvoteUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UpvoteUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UpvoteScalarWhereInput>
  }

  export type DownvoteUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<DownvoteCreateWithoutUserInput>, Enumerable<DownvoteUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<DownvoteCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<DownvoteUpsertWithWhereUniqueWithoutUserInput>
    createMany?: DownvoteCreateManyUserInputEnvelope
    set?: Enumerable<DownvoteWhereUniqueInput>
    disconnect?: Enumerable<DownvoteWhereUniqueInput>
    delete?: Enumerable<DownvoteWhereUniqueInput>
    connect?: Enumerable<DownvoteWhereUniqueInput>
    update?: Enumerable<DownvoteUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<DownvoteUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<DownvoteScalarWhereInput>
  }

  export type ShareUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ShareCreateWithoutUserInput>, Enumerable<ShareUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ShareCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ShareUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ShareCreateManyUserInputEnvelope
    set?: Enumerable<ShareWhereUniqueInput>
    disconnect?: Enumerable<ShareWhereUniqueInput>
    delete?: Enumerable<ShareWhereUniqueInput>
    connect?: Enumerable<ShareWhereUniqueInput>
    update?: Enumerable<ShareUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ShareUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ShareScalarWhereInput>
  }

  export type FollowUncheckedUpdateManyWithoutFollowingNestedInput = {
    create?: XOR<Enumerable<FollowCreateWithoutFollowingInput>, Enumerable<FollowUncheckedCreateWithoutFollowingInput>>
    connectOrCreate?: Enumerable<FollowCreateOrConnectWithoutFollowingInput>
    upsert?: Enumerable<FollowUpsertWithWhereUniqueWithoutFollowingInput>
    createMany?: FollowCreateManyFollowingInputEnvelope
    set?: Enumerable<FollowWhereUniqueInput>
    disconnect?: Enumerable<FollowWhereUniqueInput>
    delete?: Enumerable<FollowWhereUniqueInput>
    connect?: Enumerable<FollowWhereUniqueInput>
    update?: Enumerable<FollowUpdateWithWhereUniqueWithoutFollowingInput>
    updateMany?: Enumerable<FollowUpdateManyWithWhereWithoutFollowingInput>
    deleteMany?: Enumerable<FollowScalarWhereInput>
  }

  export type FollowUncheckedUpdateManyWithoutFollowerNestedInput = {
    create?: XOR<Enumerable<FollowCreateWithoutFollowerInput>, Enumerable<FollowUncheckedCreateWithoutFollowerInput>>
    connectOrCreate?: Enumerable<FollowCreateOrConnectWithoutFollowerInput>
    upsert?: Enumerable<FollowUpsertWithWhereUniqueWithoutFollowerInput>
    createMany?: FollowCreateManyFollowerInputEnvelope
    set?: Enumerable<FollowWhereUniqueInput>
    disconnect?: Enumerable<FollowWhereUniqueInput>
    delete?: Enumerable<FollowWhereUniqueInput>
    connect?: Enumerable<FollowWhereUniqueInput>
    update?: Enumerable<FollowUpdateWithWhereUniqueWithoutFollowerInput>
    updateMany?: Enumerable<FollowUpdateManyWithWhereWithoutFollowerInput>
    deleteMany?: Enumerable<FollowScalarWhereInput>
  }

  export type BlogCreatetagsInput = {
    set: Enumerable<string>
  }

  export type UserCreateNestedOneWithoutBlogInput = {
    create?: XOR<UserCreateWithoutBlogInput, UserUncheckedCreateWithoutBlogInput>
    connectOrCreate?: UserCreateOrConnectWithoutBlogInput
    connect?: UserWhereUniqueInput
  }

  export type UpvoteCreateNestedManyWithoutBlogInput = {
    create?: XOR<Enumerable<UpvoteCreateWithoutBlogInput>, Enumerable<UpvoteUncheckedCreateWithoutBlogInput>>
    connectOrCreate?: Enumerable<UpvoteCreateOrConnectWithoutBlogInput>
    createMany?: UpvoteCreateManyBlogInputEnvelope
    connect?: Enumerable<UpvoteWhereUniqueInput>
  }

  export type DownvoteCreateNestedManyWithoutBlogInput = {
    create?: XOR<Enumerable<DownvoteCreateWithoutBlogInput>, Enumerable<DownvoteUncheckedCreateWithoutBlogInput>>
    connectOrCreate?: Enumerable<DownvoteCreateOrConnectWithoutBlogInput>
    createMany?: DownvoteCreateManyBlogInputEnvelope
    connect?: Enumerable<DownvoteWhereUniqueInput>
  }

  export type ShareCreateNestedManyWithoutBlogInput = {
    create?: XOR<Enumerable<ShareCreateWithoutBlogInput>, Enumerable<ShareUncheckedCreateWithoutBlogInput>>
    connectOrCreate?: Enumerable<ShareCreateOrConnectWithoutBlogInput>
    createMany?: ShareCreateManyBlogInputEnvelope
    connect?: Enumerable<ShareWhereUniqueInput>
  }

  export type CommentCreateNestedManyWithoutBlogInput = {
    create?: XOR<Enumerable<CommentCreateWithoutBlogInput>, Enumerable<CommentUncheckedCreateWithoutBlogInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutBlogInput>
    createMany?: CommentCreateManyBlogInputEnvelope
    connect?: Enumerable<CommentWhereUniqueInput>
  }

  export type HistoryCreateNestedManyWithoutBlogInput = {
    create?: XOR<Enumerable<HistoryCreateWithoutBlogInput>, Enumerable<HistoryUncheckedCreateWithoutBlogInput>>
    connectOrCreate?: Enumerable<HistoryCreateOrConnectWithoutBlogInput>
    createMany?: HistoryCreateManyBlogInputEnvelope
    connect?: Enumerable<HistoryWhereUniqueInput>
  }

  export type UpvoteUncheckedCreateNestedManyWithoutBlogInput = {
    create?: XOR<Enumerable<UpvoteCreateWithoutBlogInput>, Enumerable<UpvoteUncheckedCreateWithoutBlogInput>>
    connectOrCreate?: Enumerable<UpvoteCreateOrConnectWithoutBlogInput>
    createMany?: UpvoteCreateManyBlogInputEnvelope
    connect?: Enumerable<UpvoteWhereUniqueInput>
  }

  export type DownvoteUncheckedCreateNestedManyWithoutBlogInput = {
    create?: XOR<Enumerable<DownvoteCreateWithoutBlogInput>, Enumerable<DownvoteUncheckedCreateWithoutBlogInput>>
    connectOrCreate?: Enumerable<DownvoteCreateOrConnectWithoutBlogInput>
    createMany?: DownvoteCreateManyBlogInputEnvelope
    connect?: Enumerable<DownvoteWhereUniqueInput>
  }

  export type ShareUncheckedCreateNestedManyWithoutBlogInput = {
    create?: XOR<Enumerable<ShareCreateWithoutBlogInput>, Enumerable<ShareUncheckedCreateWithoutBlogInput>>
    connectOrCreate?: Enumerable<ShareCreateOrConnectWithoutBlogInput>
    createMany?: ShareCreateManyBlogInputEnvelope
    connect?: Enumerable<ShareWhereUniqueInput>
  }

  export type CommentUncheckedCreateNestedManyWithoutBlogInput = {
    create?: XOR<Enumerable<CommentCreateWithoutBlogInput>, Enumerable<CommentUncheckedCreateWithoutBlogInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutBlogInput>
    createMany?: CommentCreateManyBlogInputEnvelope
    connect?: Enumerable<CommentWhereUniqueInput>
  }

  export type HistoryUncheckedCreateNestedManyWithoutBlogInput = {
    create?: XOR<Enumerable<HistoryCreateWithoutBlogInput>, Enumerable<HistoryUncheckedCreateWithoutBlogInput>>
    connectOrCreate?: Enumerable<HistoryCreateOrConnectWithoutBlogInput>
    createMany?: HistoryCreateManyBlogInputEnvelope
    connect?: Enumerable<HistoryWhereUniqueInput>
  }

  export type BlogUpdatetagsInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutBlogNestedInput = {
    create?: XOR<UserCreateWithoutBlogInput, UserUncheckedCreateWithoutBlogInput>
    connectOrCreate?: UserCreateOrConnectWithoutBlogInput
    upsert?: UserUpsertWithoutBlogInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutBlogInput, UserUncheckedUpdateWithoutBlogInput>
  }

  export type UpvoteUpdateManyWithoutBlogNestedInput = {
    create?: XOR<Enumerable<UpvoteCreateWithoutBlogInput>, Enumerable<UpvoteUncheckedCreateWithoutBlogInput>>
    connectOrCreate?: Enumerable<UpvoteCreateOrConnectWithoutBlogInput>
    upsert?: Enumerable<UpvoteUpsertWithWhereUniqueWithoutBlogInput>
    createMany?: UpvoteCreateManyBlogInputEnvelope
    set?: Enumerable<UpvoteWhereUniqueInput>
    disconnect?: Enumerable<UpvoteWhereUniqueInput>
    delete?: Enumerable<UpvoteWhereUniqueInput>
    connect?: Enumerable<UpvoteWhereUniqueInput>
    update?: Enumerable<UpvoteUpdateWithWhereUniqueWithoutBlogInput>
    updateMany?: Enumerable<UpvoteUpdateManyWithWhereWithoutBlogInput>
    deleteMany?: Enumerable<UpvoteScalarWhereInput>
  }

  export type DownvoteUpdateManyWithoutBlogNestedInput = {
    create?: XOR<Enumerable<DownvoteCreateWithoutBlogInput>, Enumerable<DownvoteUncheckedCreateWithoutBlogInput>>
    connectOrCreate?: Enumerable<DownvoteCreateOrConnectWithoutBlogInput>
    upsert?: Enumerable<DownvoteUpsertWithWhereUniqueWithoutBlogInput>
    createMany?: DownvoteCreateManyBlogInputEnvelope
    set?: Enumerable<DownvoteWhereUniqueInput>
    disconnect?: Enumerable<DownvoteWhereUniqueInput>
    delete?: Enumerable<DownvoteWhereUniqueInput>
    connect?: Enumerable<DownvoteWhereUniqueInput>
    update?: Enumerable<DownvoteUpdateWithWhereUniqueWithoutBlogInput>
    updateMany?: Enumerable<DownvoteUpdateManyWithWhereWithoutBlogInput>
    deleteMany?: Enumerable<DownvoteScalarWhereInput>
  }

  export type ShareUpdateManyWithoutBlogNestedInput = {
    create?: XOR<Enumerable<ShareCreateWithoutBlogInput>, Enumerable<ShareUncheckedCreateWithoutBlogInput>>
    connectOrCreate?: Enumerable<ShareCreateOrConnectWithoutBlogInput>
    upsert?: Enumerable<ShareUpsertWithWhereUniqueWithoutBlogInput>
    createMany?: ShareCreateManyBlogInputEnvelope
    set?: Enumerable<ShareWhereUniqueInput>
    disconnect?: Enumerable<ShareWhereUniqueInput>
    delete?: Enumerable<ShareWhereUniqueInput>
    connect?: Enumerable<ShareWhereUniqueInput>
    update?: Enumerable<ShareUpdateWithWhereUniqueWithoutBlogInput>
    updateMany?: Enumerable<ShareUpdateManyWithWhereWithoutBlogInput>
    deleteMany?: Enumerable<ShareScalarWhereInput>
  }

  export type CommentUpdateManyWithoutBlogNestedInput = {
    create?: XOR<Enumerable<CommentCreateWithoutBlogInput>, Enumerable<CommentUncheckedCreateWithoutBlogInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutBlogInput>
    upsert?: Enumerable<CommentUpsertWithWhereUniqueWithoutBlogInput>
    createMany?: CommentCreateManyBlogInputEnvelope
    set?: Enumerable<CommentWhereUniqueInput>
    disconnect?: Enumerable<CommentWhereUniqueInput>
    delete?: Enumerable<CommentWhereUniqueInput>
    connect?: Enumerable<CommentWhereUniqueInput>
    update?: Enumerable<CommentUpdateWithWhereUniqueWithoutBlogInput>
    updateMany?: Enumerable<CommentUpdateManyWithWhereWithoutBlogInput>
    deleteMany?: Enumerable<CommentScalarWhereInput>
  }

  export type HistoryUpdateManyWithoutBlogNestedInput = {
    create?: XOR<Enumerable<HistoryCreateWithoutBlogInput>, Enumerable<HistoryUncheckedCreateWithoutBlogInput>>
    connectOrCreate?: Enumerable<HistoryCreateOrConnectWithoutBlogInput>
    upsert?: Enumerable<HistoryUpsertWithWhereUniqueWithoutBlogInput>
    createMany?: HistoryCreateManyBlogInputEnvelope
    set?: Enumerable<HistoryWhereUniqueInput>
    disconnect?: Enumerable<HistoryWhereUniqueInput>
    delete?: Enumerable<HistoryWhereUniqueInput>
    connect?: Enumerable<HistoryWhereUniqueInput>
    update?: Enumerable<HistoryUpdateWithWhereUniqueWithoutBlogInput>
    updateMany?: Enumerable<HistoryUpdateManyWithWhereWithoutBlogInput>
    deleteMany?: Enumerable<HistoryScalarWhereInput>
  }

  export type UpvoteUncheckedUpdateManyWithoutBlogNestedInput = {
    create?: XOR<Enumerable<UpvoteCreateWithoutBlogInput>, Enumerable<UpvoteUncheckedCreateWithoutBlogInput>>
    connectOrCreate?: Enumerable<UpvoteCreateOrConnectWithoutBlogInput>
    upsert?: Enumerable<UpvoteUpsertWithWhereUniqueWithoutBlogInput>
    createMany?: UpvoteCreateManyBlogInputEnvelope
    set?: Enumerable<UpvoteWhereUniqueInput>
    disconnect?: Enumerable<UpvoteWhereUniqueInput>
    delete?: Enumerable<UpvoteWhereUniqueInput>
    connect?: Enumerable<UpvoteWhereUniqueInput>
    update?: Enumerable<UpvoteUpdateWithWhereUniqueWithoutBlogInput>
    updateMany?: Enumerable<UpvoteUpdateManyWithWhereWithoutBlogInput>
    deleteMany?: Enumerable<UpvoteScalarWhereInput>
  }

  export type DownvoteUncheckedUpdateManyWithoutBlogNestedInput = {
    create?: XOR<Enumerable<DownvoteCreateWithoutBlogInput>, Enumerable<DownvoteUncheckedCreateWithoutBlogInput>>
    connectOrCreate?: Enumerable<DownvoteCreateOrConnectWithoutBlogInput>
    upsert?: Enumerable<DownvoteUpsertWithWhereUniqueWithoutBlogInput>
    createMany?: DownvoteCreateManyBlogInputEnvelope
    set?: Enumerable<DownvoteWhereUniqueInput>
    disconnect?: Enumerable<DownvoteWhereUniqueInput>
    delete?: Enumerable<DownvoteWhereUniqueInput>
    connect?: Enumerable<DownvoteWhereUniqueInput>
    update?: Enumerable<DownvoteUpdateWithWhereUniqueWithoutBlogInput>
    updateMany?: Enumerable<DownvoteUpdateManyWithWhereWithoutBlogInput>
    deleteMany?: Enumerable<DownvoteScalarWhereInput>
  }

  export type ShareUncheckedUpdateManyWithoutBlogNestedInput = {
    create?: XOR<Enumerable<ShareCreateWithoutBlogInput>, Enumerable<ShareUncheckedCreateWithoutBlogInput>>
    connectOrCreate?: Enumerable<ShareCreateOrConnectWithoutBlogInput>
    upsert?: Enumerable<ShareUpsertWithWhereUniqueWithoutBlogInput>
    createMany?: ShareCreateManyBlogInputEnvelope
    set?: Enumerable<ShareWhereUniqueInput>
    disconnect?: Enumerable<ShareWhereUniqueInput>
    delete?: Enumerable<ShareWhereUniqueInput>
    connect?: Enumerable<ShareWhereUniqueInput>
    update?: Enumerable<ShareUpdateWithWhereUniqueWithoutBlogInput>
    updateMany?: Enumerable<ShareUpdateManyWithWhereWithoutBlogInput>
    deleteMany?: Enumerable<ShareScalarWhereInput>
  }

  export type CommentUncheckedUpdateManyWithoutBlogNestedInput = {
    create?: XOR<Enumerable<CommentCreateWithoutBlogInput>, Enumerable<CommentUncheckedCreateWithoutBlogInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutBlogInput>
    upsert?: Enumerable<CommentUpsertWithWhereUniqueWithoutBlogInput>
    createMany?: CommentCreateManyBlogInputEnvelope
    set?: Enumerable<CommentWhereUniqueInput>
    disconnect?: Enumerable<CommentWhereUniqueInput>
    delete?: Enumerable<CommentWhereUniqueInput>
    connect?: Enumerable<CommentWhereUniqueInput>
    update?: Enumerable<CommentUpdateWithWhereUniqueWithoutBlogInput>
    updateMany?: Enumerable<CommentUpdateManyWithWhereWithoutBlogInput>
    deleteMany?: Enumerable<CommentScalarWhereInput>
  }

  export type HistoryUncheckedUpdateManyWithoutBlogNestedInput = {
    create?: XOR<Enumerable<HistoryCreateWithoutBlogInput>, Enumerable<HistoryUncheckedCreateWithoutBlogInput>>
    connectOrCreate?: Enumerable<HistoryCreateOrConnectWithoutBlogInput>
    upsert?: Enumerable<HistoryUpsertWithWhereUniqueWithoutBlogInput>
    createMany?: HistoryCreateManyBlogInputEnvelope
    set?: Enumerable<HistoryWhereUniqueInput>
    disconnect?: Enumerable<HistoryWhereUniqueInput>
    delete?: Enumerable<HistoryWhereUniqueInput>
    connect?: Enumerable<HistoryWhereUniqueInput>
    update?: Enumerable<HistoryUpdateWithWhereUniqueWithoutBlogInput>
    updateMany?: Enumerable<HistoryUpdateManyWithWhereWithoutBlogInput>
    deleteMany?: Enumerable<HistoryScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutUpvoteInput = {
    create?: XOR<UserCreateWithoutUpvoteInput, UserUncheckedCreateWithoutUpvoteInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpvoteInput
    connect?: UserWhereUniqueInput
  }

  export type BlogCreateNestedOneWithoutUpvoteInput = {
    create?: XOR<BlogCreateWithoutUpvoteInput, BlogUncheckedCreateWithoutUpvoteInput>
    connectOrCreate?: BlogCreateOrConnectWithoutUpvoteInput
    connect?: BlogWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUpvoteNestedInput = {
    create?: XOR<UserCreateWithoutUpvoteInput, UserUncheckedCreateWithoutUpvoteInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpvoteInput
    upsert?: UserUpsertWithoutUpvoteInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutUpvoteInput, UserUncheckedUpdateWithoutUpvoteInput>
  }

  export type BlogUpdateOneRequiredWithoutUpvoteNestedInput = {
    create?: XOR<BlogCreateWithoutUpvoteInput, BlogUncheckedCreateWithoutUpvoteInput>
    connectOrCreate?: BlogCreateOrConnectWithoutUpvoteInput
    upsert?: BlogUpsertWithoutUpvoteInput
    connect?: BlogWhereUniqueInput
    update?: XOR<BlogUpdateWithoutUpvoteInput, BlogUncheckedUpdateWithoutUpvoteInput>
  }

  export type UserCreateNestedOneWithoutDownvoteInput = {
    create?: XOR<UserCreateWithoutDownvoteInput, UserUncheckedCreateWithoutDownvoteInput>
    connectOrCreate?: UserCreateOrConnectWithoutDownvoteInput
    connect?: UserWhereUniqueInput
  }

  export type BlogCreateNestedOneWithoutDownvoteInput = {
    create?: XOR<BlogCreateWithoutDownvoteInput, BlogUncheckedCreateWithoutDownvoteInput>
    connectOrCreate?: BlogCreateOrConnectWithoutDownvoteInput
    connect?: BlogWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutDownvoteNestedInput = {
    create?: XOR<UserCreateWithoutDownvoteInput, UserUncheckedCreateWithoutDownvoteInput>
    connectOrCreate?: UserCreateOrConnectWithoutDownvoteInput
    upsert?: UserUpsertWithoutDownvoteInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutDownvoteInput, UserUncheckedUpdateWithoutDownvoteInput>
  }

  export type BlogUpdateOneRequiredWithoutDownvoteNestedInput = {
    create?: XOR<BlogCreateWithoutDownvoteInput, BlogUncheckedCreateWithoutDownvoteInput>
    connectOrCreate?: BlogCreateOrConnectWithoutDownvoteInput
    upsert?: BlogUpsertWithoutDownvoteInput
    connect?: BlogWhereUniqueInput
    update?: XOR<BlogUpdateWithoutDownvoteInput, BlogUncheckedUpdateWithoutDownvoteInput>
  }

  export type UserCreateNestedOneWithoutShareInput = {
    create?: XOR<UserCreateWithoutShareInput, UserUncheckedCreateWithoutShareInput>
    connectOrCreate?: UserCreateOrConnectWithoutShareInput
    connect?: UserWhereUniqueInput
  }

  export type BlogCreateNestedOneWithoutShareInput = {
    create?: XOR<BlogCreateWithoutShareInput, BlogUncheckedCreateWithoutShareInput>
    connectOrCreate?: BlogCreateOrConnectWithoutShareInput
    connect?: BlogWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutShareNestedInput = {
    create?: XOR<UserCreateWithoutShareInput, UserUncheckedCreateWithoutShareInput>
    connectOrCreate?: UserCreateOrConnectWithoutShareInput
    upsert?: UserUpsertWithoutShareInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutShareInput, UserUncheckedUpdateWithoutShareInput>
  }

  export type BlogUpdateOneRequiredWithoutShareNestedInput = {
    create?: XOR<BlogCreateWithoutShareInput, BlogUncheckedCreateWithoutShareInput>
    connectOrCreate?: BlogCreateOrConnectWithoutShareInput
    upsert?: BlogUpsertWithoutShareInput
    connect?: BlogWhereUniqueInput
    update?: XOR<BlogUpdateWithoutShareInput, BlogUncheckedUpdateWithoutShareInput>
  }

  export type UserCreateNestedOneWithoutCommentInput = {
    create?: XOR<UserCreateWithoutCommentInput, UserUncheckedCreateWithoutCommentInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentInput
    connect?: UserWhereUniqueInput
  }

  export type BlogCreateNestedOneWithoutCommentInput = {
    create?: XOR<BlogCreateWithoutCommentInput, BlogUncheckedCreateWithoutCommentInput>
    connectOrCreate?: BlogCreateOrConnectWithoutCommentInput
    connect?: BlogWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCommentNestedInput = {
    create?: XOR<UserCreateWithoutCommentInput, UserUncheckedCreateWithoutCommentInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentInput
    upsert?: UserUpsertWithoutCommentInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutCommentInput, UserUncheckedUpdateWithoutCommentInput>
  }

  export type BlogUpdateOneRequiredWithoutCommentNestedInput = {
    create?: XOR<BlogCreateWithoutCommentInput, BlogUncheckedCreateWithoutCommentInput>
    connectOrCreate?: BlogCreateOrConnectWithoutCommentInput
    upsert?: BlogUpsertWithoutCommentInput
    connect?: BlogWhereUniqueInput
    update?: XOR<BlogUpdateWithoutCommentInput, BlogUncheckedUpdateWithoutCommentInput>
  }

  export type UserCreateNestedOneWithoutHistoryInput = {
    create?: XOR<UserCreateWithoutHistoryInput, UserUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutHistoryInput
    connect?: UserWhereUniqueInput
  }

  export type BlogCreateNestedOneWithoutHistoryInput = {
    create?: XOR<BlogCreateWithoutHistoryInput, BlogUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: BlogCreateOrConnectWithoutHistoryInput
    connect?: BlogWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutHistoryNestedInput = {
    create?: XOR<UserCreateWithoutHistoryInput, UserUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutHistoryInput
    upsert?: UserUpsertWithoutHistoryInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutHistoryInput, UserUncheckedUpdateWithoutHistoryInput>
  }

  export type BlogUpdateOneRequiredWithoutHistoryNestedInput = {
    create?: XOR<BlogCreateWithoutHistoryInput, BlogUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: BlogCreateOrConnectWithoutHistoryInput
    upsert?: BlogUpsertWithoutHistoryInput
    connect?: BlogWhereUniqueInput
    update?: XOR<BlogUpdateWithoutHistoryInput, BlogUncheckedUpdateWithoutHistoryInput>
  }

  export type UserCreateNestedOneWithoutFollowingInput = {
    create?: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput>
    connectOrCreate?: UserCreateOrConnectWithoutFollowingInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutFollowedByInput = {
    create?: XOR<UserCreateWithoutFollowedByInput, UserUncheckedCreateWithoutFollowedByInput>
    connectOrCreate?: UserCreateOrConnectWithoutFollowedByInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFollowingNestedInput = {
    create?: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput>
    connectOrCreate?: UserCreateOrConnectWithoutFollowingInput
    upsert?: UserUpsertWithoutFollowingInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutFollowingInput, UserUncheckedUpdateWithoutFollowingInput>
  }

  export type UserUpdateOneRequiredWithoutFollowedByNestedInput = {
    create?: XOR<UserCreateWithoutFollowedByInput, UserUncheckedCreateWithoutFollowedByInput>
    connectOrCreate?: UserCreateOrConnectWithoutFollowedByInput
    upsert?: UserUpsertWithoutFollowedByInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutFollowedByInput, UserUncheckedUpdateWithoutFollowedByInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type BlogCreateWithoutUserInput = {
    title: string
    content: string
    tags?: BlogCreatetagsInput | Enumerable<string>
    photo: string
    date?: Date | string
    upvoted?: boolean
    downvoted?: boolean
    upvote?: UpvoteCreateNestedManyWithoutBlogInput
    downvote?: DownvoteCreateNestedManyWithoutBlogInput
    share?: ShareCreateNestedManyWithoutBlogInput
    comment?: CommentCreateNestedManyWithoutBlogInput
    history?: HistoryCreateNestedManyWithoutBlogInput
  }

  export type BlogUncheckedCreateWithoutUserInput = {
    id?: number
    title: string
    content: string
    tags?: BlogCreatetagsInput | Enumerable<string>
    photo: string
    date?: Date | string
    upvoted?: boolean
    downvoted?: boolean
    upvote?: UpvoteUncheckedCreateNestedManyWithoutBlogInput
    downvote?: DownvoteUncheckedCreateNestedManyWithoutBlogInput
    share?: ShareUncheckedCreateNestedManyWithoutBlogInput
    comment?: CommentUncheckedCreateNestedManyWithoutBlogInput
    history?: HistoryUncheckedCreateNestedManyWithoutBlogInput
  }

  export type BlogCreateOrConnectWithoutUserInput = {
    where: BlogWhereUniqueInput
    create: XOR<BlogCreateWithoutUserInput, BlogUncheckedCreateWithoutUserInput>
  }

  export type BlogCreateManyUserInputEnvelope = {
    data: Enumerable<BlogCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type HistoryCreateWithoutUserInput = {
    date?: Date | string
    blog: BlogCreateNestedOneWithoutHistoryInput
  }

  export type HistoryUncheckedCreateWithoutUserInput = {
    date?: Date | string
    blogId: number
  }

  export type HistoryCreateOrConnectWithoutUserInput = {
    where: HistoryWhereUniqueInput
    create: XOR<HistoryCreateWithoutUserInput, HistoryUncheckedCreateWithoutUserInput>
  }

  export type HistoryCreateManyUserInputEnvelope = {
    data: Enumerable<HistoryCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutUserInput = {
    content: string
    date?: Date | string
    liked?: boolean
    like_count?: number
    blog: BlogCreateNestedOneWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutUserInput = {
    id?: number
    content: string
    date?: Date | string
    liked?: boolean
    like_count?: number
    blogId: number
  }

  export type CommentCreateOrConnectWithoutUserInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentCreateManyUserInputEnvelope = {
    data: Enumerable<CommentCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type UpvoteCreateWithoutUserInput = {
    blog: BlogCreateNestedOneWithoutUpvoteInput
  }

  export type UpvoteUncheckedCreateWithoutUserInput = {
    blogId: number
  }

  export type UpvoteCreateOrConnectWithoutUserInput = {
    where: UpvoteWhereUniqueInput
    create: XOR<UpvoteCreateWithoutUserInput, UpvoteUncheckedCreateWithoutUserInput>
  }

  export type UpvoteCreateManyUserInputEnvelope = {
    data: Enumerable<UpvoteCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type DownvoteCreateWithoutUserInput = {
    blog: BlogCreateNestedOneWithoutDownvoteInput
  }

  export type DownvoteUncheckedCreateWithoutUserInput = {
    blogId: number
  }

  export type DownvoteCreateOrConnectWithoutUserInput = {
    where: DownvoteWhereUniqueInput
    create: XOR<DownvoteCreateWithoutUserInput, DownvoteUncheckedCreateWithoutUserInput>
  }

  export type DownvoteCreateManyUserInputEnvelope = {
    data: Enumerable<DownvoteCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ShareCreateWithoutUserInput = {
    blog: BlogCreateNestedOneWithoutShareInput
  }

  export type ShareUncheckedCreateWithoutUserInput = {
    blogId: number
  }

  export type ShareCreateOrConnectWithoutUserInput = {
    where: ShareWhereUniqueInput
    create: XOR<ShareCreateWithoutUserInput, ShareUncheckedCreateWithoutUserInput>
  }

  export type ShareCreateManyUserInputEnvelope = {
    data: Enumerable<ShareCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type FollowCreateWithoutFollowingInput = {
    follower: UserCreateNestedOneWithoutFollowingInput
  }

  export type FollowUncheckedCreateWithoutFollowingInput = {
    followerId: string
  }

  export type FollowCreateOrConnectWithoutFollowingInput = {
    where: FollowWhereUniqueInput
    create: XOR<FollowCreateWithoutFollowingInput, FollowUncheckedCreateWithoutFollowingInput>
  }

  export type FollowCreateManyFollowingInputEnvelope = {
    data: Enumerable<FollowCreateManyFollowingInput>
    skipDuplicates?: boolean
  }

  export type FollowCreateWithoutFollowerInput = {
    following: UserCreateNestedOneWithoutFollowedByInput
  }

  export type FollowUncheckedCreateWithoutFollowerInput = {
    followingId: string
  }

  export type FollowCreateOrConnectWithoutFollowerInput = {
    where: FollowWhereUniqueInput
    create: XOR<FollowCreateWithoutFollowerInput, FollowUncheckedCreateWithoutFollowerInput>
  }

  export type FollowCreateManyFollowerInputEnvelope = {
    data: Enumerable<FollowCreateManyFollowerInput>
    skipDuplicates?: boolean
  }

  export type BlogUpsertWithWhereUniqueWithoutUserInput = {
    where: BlogWhereUniqueInput
    update: XOR<BlogUpdateWithoutUserInput, BlogUncheckedUpdateWithoutUserInput>
    create: XOR<BlogCreateWithoutUserInput, BlogUncheckedCreateWithoutUserInput>
  }

  export type BlogUpdateWithWhereUniqueWithoutUserInput = {
    where: BlogWhereUniqueInput
    data: XOR<BlogUpdateWithoutUserInput, BlogUncheckedUpdateWithoutUserInput>
  }

  export type BlogUpdateManyWithWhereWithoutUserInput = {
    where: BlogScalarWhereInput
    data: XOR<BlogUpdateManyMutationInput, BlogUncheckedUpdateManyWithoutBlogInput>
  }

  export type BlogScalarWhereInput = {
    AND?: Enumerable<BlogScalarWhereInput>
    OR?: Enumerable<BlogScalarWhereInput>
    NOT?: Enumerable<BlogScalarWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    content?: StringFilter | string
    tags?: StringNullableListFilter
    photo?: StringFilter | string
    date?: DateTimeFilter | Date | string
    upvoted?: BoolFilter | boolean
    downvoted?: BoolFilter | boolean
    userId?: StringFilter | string
  }

  export type HistoryUpsertWithWhereUniqueWithoutUserInput = {
    where: HistoryWhereUniqueInput
    update: XOR<HistoryUpdateWithoutUserInput, HistoryUncheckedUpdateWithoutUserInput>
    create: XOR<HistoryCreateWithoutUserInput, HistoryUncheckedCreateWithoutUserInput>
  }

  export type HistoryUpdateWithWhereUniqueWithoutUserInput = {
    where: HistoryWhereUniqueInput
    data: XOR<HistoryUpdateWithoutUserInput, HistoryUncheckedUpdateWithoutUserInput>
  }

  export type HistoryUpdateManyWithWhereWithoutUserInput = {
    where: HistoryScalarWhereInput
    data: XOR<HistoryUpdateManyMutationInput, HistoryUncheckedUpdateManyWithoutHistoryInput>
  }

  export type HistoryScalarWhereInput = {
    AND?: Enumerable<HistoryScalarWhereInput>
    OR?: Enumerable<HistoryScalarWhereInput>
    NOT?: Enumerable<HistoryScalarWhereInput>
    date?: DateTimeFilter | Date | string
    userId?: StringFilter | string
    blogId?: IntFilter | number
  }

  export type CommentUpsertWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
  }

  export type CommentUpdateManyWithWhereWithoutUserInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutCommentInput>
  }

  export type CommentScalarWhereInput = {
    AND?: Enumerable<CommentScalarWhereInput>
    OR?: Enumerable<CommentScalarWhereInput>
    NOT?: Enumerable<CommentScalarWhereInput>
    id?: IntFilter | number
    content?: StringFilter | string
    date?: DateTimeFilter | Date | string
    liked?: BoolFilter | boolean
    like_count?: IntFilter | number
    userId?: StringFilter | string
    blogId?: IntFilter | number
  }

  export type UpvoteUpsertWithWhereUniqueWithoutUserInput = {
    where: UpvoteWhereUniqueInput
    update: XOR<UpvoteUpdateWithoutUserInput, UpvoteUncheckedUpdateWithoutUserInput>
    create: XOR<UpvoteCreateWithoutUserInput, UpvoteUncheckedCreateWithoutUserInput>
  }

  export type UpvoteUpdateWithWhereUniqueWithoutUserInput = {
    where: UpvoteWhereUniqueInput
    data: XOR<UpvoteUpdateWithoutUserInput, UpvoteUncheckedUpdateWithoutUserInput>
  }

  export type UpvoteUpdateManyWithWhereWithoutUserInput = {
    where: UpvoteScalarWhereInput
    data: XOR<UpvoteUpdateManyMutationInput, UpvoteUncheckedUpdateManyWithoutUpvoteInput>
  }

  export type UpvoteScalarWhereInput = {
    AND?: Enumerable<UpvoteScalarWhereInput>
    OR?: Enumerable<UpvoteScalarWhereInput>
    NOT?: Enumerable<UpvoteScalarWhereInput>
    userId?: StringFilter | string
    blogId?: IntFilter | number
  }

  export type DownvoteUpsertWithWhereUniqueWithoutUserInput = {
    where: DownvoteWhereUniqueInput
    update: XOR<DownvoteUpdateWithoutUserInput, DownvoteUncheckedUpdateWithoutUserInput>
    create: XOR<DownvoteCreateWithoutUserInput, DownvoteUncheckedCreateWithoutUserInput>
  }

  export type DownvoteUpdateWithWhereUniqueWithoutUserInput = {
    where: DownvoteWhereUniqueInput
    data: XOR<DownvoteUpdateWithoutUserInput, DownvoteUncheckedUpdateWithoutUserInput>
  }

  export type DownvoteUpdateManyWithWhereWithoutUserInput = {
    where: DownvoteScalarWhereInput
    data: XOR<DownvoteUpdateManyMutationInput, DownvoteUncheckedUpdateManyWithoutDownvoteInput>
  }

  export type DownvoteScalarWhereInput = {
    AND?: Enumerable<DownvoteScalarWhereInput>
    OR?: Enumerable<DownvoteScalarWhereInput>
    NOT?: Enumerable<DownvoteScalarWhereInput>
    userId?: StringFilter | string
    blogId?: IntFilter | number
  }

  export type ShareUpsertWithWhereUniqueWithoutUserInput = {
    where: ShareWhereUniqueInput
    update: XOR<ShareUpdateWithoutUserInput, ShareUncheckedUpdateWithoutUserInput>
    create: XOR<ShareCreateWithoutUserInput, ShareUncheckedCreateWithoutUserInput>
  }

  export type ShareUpdateWithWhereUniqueWithoutUserInput = {
    where: ShareWhereUniqueInput
    data: XOR<ShareUpdateWithoutUserInput, ShareUncheckedUpdateWithoutUserInput>
  }

  export type ShareUpdateManyWithWhereWithoutUserInput = {
    where: ShareScalarWhereInput
    data: XOR<ShareUpdateManyMutationInput, ShareUncheckedUpdateManyWithoutShareInput>
  }

  export type ShareScalarWhereInput = {
    AND?: Enumerable<ShareScalarWhereInput>
    OR?: Enumerable<ShareScalarWhereInput>
    NOT?: Enumerable<ShareScalarWhereInput>
    userId?: StringFilter | string
    blogId?: IntFilter | number
  }

  export type FollowUpsertWithWhereUniqueWithoutFollowingInput = {
    where: FollowWhereUniqueInput
    update: XOR<FollowUpdateWithoutFollowingInput, FollowUncheckedUpdateWithoutFollowingInput>
    create: XOR<FollowCreateWithoutFollowingInput, FollowUncheckedCreateWithoutFollowingInput>
  }

  export type FollowUpdateWithWhereUniqueWithoutFollowingInput = {
    where: FollowWhereUniqueInput
    data: XOR<FollowUpdateWithoutFollowingInput, FollowUncheckedUpdateWithoutFollowingInput>
  }

  export type FollowUpdateManyWithWhereWithoutFollowingInput = {
    where: FollowScalarWhereInput
    data: XOR<FollowUpdateManyMutationInput, FollowUncheckedUpdateManyWithoutFollowedByInput>
  }

  export type FollowScalarWhereInput = {
    AND?: Enumerable<FollowScalarWhereInput>
    OR?: Enumerable<FollowScalarWhereInput>
    NOT?: Enumerable<FollowScalarWhereInput>
    followerId?: StringFilter | string
    followingId?: StringFilter | string
  }

  export type FollowUpsertWithWhereUniqueWithoutFollowerInput = {
    where: FollowWhereUniqueInput
    update: XOR<FollowUpdateWithoutFollowerInput, FollowUncheckedUpdateWithoutFollowerInput>
    create: XOR<FollowCreateWithoutFollowerInput, FollowUncheckedCreateWithoutFollowerInput>
  }

  export type FollowUpdateWithWhereUniqueWithoutFollowerInput = {
    where: FollowWhereUniqueInput
    data: XOR<FollowUpdateWithoutFollowerInput, FollowUncheckedUpdateWithoutFollowerInput>
  }

  export type FollowUpdateManyWithWhereWithoutFollowerInput = {
    where: FollowScalarWhereInput
    data: XOR<FollowUpdateManyMutationInput, FollowUncheckedUpdateManyWithoutFollowingInput>
  }

  export type UserCreateWithoutBlogInput = {
    id: string
    order?: number
    email?: string | null
    photo?: string | null
    name: string
    bio?: string | null
    history?: HistoryCreateNestedManyWithoutUserInput
    comment?: CommentCreateNestedManyWithoutUserInput
    upvote?: UpvoteCreateNestedManyWithoutUserInput
    downvote?: DownvoteCreateNestedManyWithoutUserInput
    share?: ShareCreateNestedManyWithoutUserInput
    followedBy?: FollowCreateNestedManyWithoutFollowingInput
    following?: FollowCreateNestedManyWithoutFollowerInput
  }

  export type UserUncheckedCreateWithoutBlogInput = {
    id: string
    order?: number
    email?: string | null
    photo?: string | null
    name: string
    bio?: string | null
    history?: HistoryUncheckedCreateNestedManyWithoutUserInput
    comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    upvote?: UpvoteUncheckedCreateNestedManyWithoutUserInput
    downvote?: DownvoteUncheckedCreateNestedManyWithoutUserInput
    share?: ShareUncheckedCreateNestedManyWithoutUserInput
    followedBy?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
  }

  export type UserCreateOrConnectWithoutBlogInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBlogInput, UserUncheckedCreateWithoutBlogInput>
  }

  export type UpvoteCreateWithoutBlogInput = {
    user: UserCreateNestedOneWithoutUpvoteInput
  }

  export type UpvoteUncheckedCreateWithoutBlogInput = {
    userId: string
  }

  export type UpvoteCreateOrConnectWithoutBlogInput = {
    where: UpvoteWhereUniqueInput
    create: XOR<UpvoteCreateWithoutBlogInput, UpvoteUncheckedCreateWithoutBlogInput>
  }

  export type UpvoteCreateManyBlogInputEnvelope = {
    data: Enumerable<UpvoteCreateManyBlogInput>
    skipDuplicates?: boolean
  }

  export type DownvoteCreateWithoutBlogInput = {
    user: UserCreateNestedOneWithoutDownvoteInput
  }

  export type DownvoteUncheckedCreateWithoutBlogInput = {
    userId: string
  }

  export type DownvoteCreateOrConnectWithoutBlogInput = {
    where: DownvoteWhereUniqueInput
    create: XOR<DownvoteCreateWithoutBlogInput, DownvoteUncheckedCreateWithoutBlogInput>
  }

  export type DownvoteCreateManyBlogInputEnvelope = {
    data: Enumerable<DownvoteCreateManyBlogInput>
    skipDuplicates?: boolean
  }

  export type ShareCreateWithoutBlogInput = {
    user: UserCreateNestedOneWithoutShareInput
  }

  export type ShareUncheckedCreateWithoutBlogInput = {
    userId: string
  }

  export type ShareCreateOrConnectWithoutBlogInput = {
    where: ShareWhereUniqueInput
    create: XOR<ShareCreateWithoutBlogInput, ShareUncheckedCreateWithoutBlogInput>
  }

  export type ShareCreateManyBlogInputEnvelope = {
    data: Enumerable<ShareCreateManyBlogInput>
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutBlogInput = {
    content: string
    date?: Date | string
    liked?: boolean
    like_count?: number
    user: UserCreateNestedOneWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutBlogInput = {
    id?: number
    content: string
    date?: Date | string
    liked?: boolean
    like_count?: number
    userId: string
  }

  export type CommentCreateOrConnectWithoutBlogInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutBlogInput, CommentUncheckedCreateWithoutBlogInput>
  }

  export type CommentCreateManyBlogInputEnvelope = {
    data: Enumerable<CommentCreateManyBlogInput>
    skipDuplicates?: boolean
  }

  export type HistoryCreateWithoutBlogInput = {
    date?: Date | string
    user: UserCreateNestedOneWithoutHistoryInput
  }

  export type HistoryUncheckedCreateWithoutBlogInput = {
    date?: Date | string
    userId: string
  }

  export type HistoryCreateOrConnectWithoutBlogInput = {
    where: HistoryWhereUniqueInput
    create: XOR<HistoryCreateWithoutBlogInput, HistoryUncheckedCreateWithoutBlogInput>
  }

  export type HistoryCreateManyBlogInputEnvelope = {
    data: Enumerable<HistoryCreateManyBlogInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutBlogInput = {
    update: XOR<UserUpdateWithoutBlogInput, UserUncheckedUpdateWithoutBlogInput>
    create: XOR<UserCreateWithoutBlogInput, UserUncheckedCreateWithoutBlogInput>
  }

  export type UserUpdateWithoutBlogInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    history?: HistoryUpdateManyWithoutUserNestedInput
    comment?: CommentUpdateManyWithoutUserNestedInput
    upvote?: UpvoteUpdateManyWithoutUserNestedInput
    downvote?: DownvoteUpdateManyWithoutUserNestedInput
    share?: ShareUpdateManyWithoutUserNestedInput
    followedBy?: FollowUpdateManyWithoutFollowingNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
  }

  export type UserUncheckedUpdateWithoutBlogInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    history?: HistoryUncheckedUpdateManyWithoutUserNestedInput
    comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    upvote?: UpvoteUncheckedUpdateManyWithoutUserNestedInput
    downvote?: DownvoteUncheckedUpdateManyWithoutUserNestedInput
    share?: ShareUncheckedUpdateManyWithoutUserNestedInput
    followedBy?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
  }

  export type UpvoteUpsertWithWhereUniqueWithoutBlogInput = {
    where: UpvoteWhereUniqueInput
    update: XOR<UpvoteUpdateWithoutBlogInput, UpvoteUncheckedUpdateWithoutBlogInput>
    create: XOR<UpvoteCreateWithoutBlogInput, UpvoteUncheckedCreateWithoutBlogInput>
  }

  export type UpvoteUpdateWithWhereUniqueWithoutBlogInput = {
    where: UpvoteWhereUniqueInput
    data: XOR<UpvoteUpdateWithoutBlogInput, UpvoteUncheckedUpdateWithoutBlogInput>
  }

  export type UpvoteUpdateManyWithWhereWithoutBlogInput = {
    where: UpvoteScalarWhereInput
    data: XOR<UpvoteUpdateManyMutationInput, UpvoteUncheckedUpdateManyWithoutUpvoteInput>
  }

  export type DownvoteUpsertWithWhereUniqueWithoutBlogInput = {
    where: DownvoteWhereUniqueInput
    update: XOR<DownvoteUpdateWithoutBlogInput, DownvoteUncheckedUpdateWithoutBlogInput>
    create: XOR<DownvoteCreateWithoutBlogInput, DownvoteUncheckedCreateWithoutBlogInput>
  }

  export type DownvoteUpdateWithWhereUniqueWithoutBlogInput = {
    where: DownvoteWhereUniqueInput
    data: XOR<DownvoteUpdateWithoutBlogInput, DownvoteUncheckedUpdateWithoutBlogInput>
  }

  export type DownvoteUpdateManyWithWhereWithoutBlogInput = {
    where: DownvoteScalarWhereInput
    data: XOR<DownvoteUpdateManyMutationInput, DownvoteUncheckedUpdateManyWithoutDownvoteInput>
  }

  export type ShareUpsertWithWhereUniqueWithoutBlogInput = {
    where: ShareWhereUniqueInput
    update: XOR<ShareUpdateWithoutBlogInput, ShareUncheckedUpdateWithoutBlogInput>
    create: XOR<ShareCreateWithoutBlogInput, ShareUncheckedCreateWithoutBlogInput>
  }

  export type ShareUpdateWithWhereUniqueWithoutBlogInput = {
    where: ShareWhereUniqueInput
    data: XOR<ShareUpdateWithoutBlogInput, ShareUncheckedUpdateWithoutBlogInput>
  }

  export type ShareUpdateManyWithWhereWithoutBlogInput = {
    where: ShareScalarWhereInput
    data: XOR<ShareUpdateManyMutationInput, ShareUncheckedUpdateManyWithoutShareInput>
  }

  export type CommentUpsertWithWhereUniqueWithoutBlogInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutBlogInput, CommentUncheckedUpdateWithoutBlogInput>
    create: XOR<CommentCreateWithoutBlogInput, CommentUncheckedCreateWithoutBlogInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutBlogInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutBlogInput, CommentUncheckedUpdateWithoutBlogInput>
  }

  export type CommentUpdateManyWithWhereWithoutBlogInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutCommentInput>
  }

  export type HistoryUpsertWithWhereUniqueWithoutBlogInput = {
    where: HistoryWhereUniqueInput
    update: XOR<HistoryUpdateWithoutBlogInput, HistoryUncheckedUpdateWithoutBlogInput>
    create: XOR<HistoryCreateWithoutBlogInput, HistoryUncheckedCreateWithoutBlogInput>
  }

  export type HistoryUpdateWithWhereUniqueWithoutBlogInput = {
    where: HistoryWhereUniqueInput
    data: XOR<HistoryUpdateWithoutBlogInput, HistoryUncheckedUpdateWithoutBlogInput>
  }

  export type HistoryUpdateManyWithWhereWithoutBlogInput = {
    where: HistoryScalarWhereInput
    data: XOR<HistoryUpdateManyMutationInput, HistoryUncheckedUpdateManyWithoutHistoryInput>
  }

  export type UserCreateWithoutUpvoteInput = {
    id: string
    order?: number
    email?: string | null
    photo?: string | null
    name: string
    bio?: string | null
    blog?: BlogCreateNestedManyWithoutUserInput
    history?: HistoryCreateNestedManyWithoutUserInput
    comment?: CommentCreateNestedManyWithoutUserInput
    downvote?: DownvoteCreateNestedManyWithoutUserInput
    share?: ShareCreateNestedManyWithoutUserInput
    followedBy?: FollowCreateNestedManyWithoutFollowingInput
    following?: FollowCreateNestedManyWithoutFollowerInput
  }

  export type UserUncheckedCreateWithoutUpvoteInput = {
    id: string
    order?: number
    email?: string | null
    photo?: string | null
    name: string
    bio?: string | null
    blog?: BlogUncheckedCreateNestedManyWithoutUserInput
    history?: HistoryUncheckedCreateNestedManyWithoutUserInput
    comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    downvote?: DownvoteUncheckedCreateNestedManyWithoutUserInput
    share?: ShareUncheckedCreateNestedManyWithoutUserInput
    followedBy?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
  }

  export type UserCreateOrConnectWithoutUpvoteInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpvoteInput, UserUncheckedCreateWithoutUpvoteInput>
  }

  export type BlogCreateWithoutUpvoteInput = {
    title: string
    content: string
    tags?: BlogCreatetagsInput | Enumerable<string>
    photo: string
    date?: Date | string
    upvoted?: boolean
    downvoted?: boolean
    user: UserCreateNestedOneWithoutBlogInput
    downvote?: DownvoteCreateNestedManyWithoutBlogInput
    share?: ShareCreateNestedManyWithoutBlogInput
    comment?: CommentCreateNestedManyWithoutBlogInput
    history?: HistoryCreateNestedManyWithoutBlogInput
  }

  export type BlogUncheckedCreateWithoutUpvoteInput = {
    id?: number
    title: string
    content: string
    tags?: BlogCreatetagsInput | Enumerable<string>
    photo: string
    date?: Date | string
    upvoted?: boolean
    downvoted?: boolean
    userId: string
    downvote?: DownvoteUncheckedCreateNestedManyWithoutBlogInput
    share?: ShareUncheckedCreateNestedManyWithoutBlogInput
    comment?: CommentUncheckedCreateNestedManyWithoutBlogInput
    history?: HistoryUncheckedCreateNestedManyWithoutBlogInput
  }

  export type BlogCreateOrConnectWithoutUpvoteInput = {
    where: BlogWhereUniqueInput
    create: XOR<BlogCreateWithoutUpvoteInput, BlogUncheckedCreateWithoutUpvoteInput>
  }

  export type UserUpsertWithoutUpvoteInput = {
    update: XOR<UserUpdateWithoutUpvoteInput, UserUncheckedUpdateWithoutUpvoteInput>
    create: XOR<UserCreateWithoutUpvoteInput, UserUncheckedCreateWithoutUpvoteInput>
  }

  export type UserUpdateWithoutUpvoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    blog?: BlogUpdateManyWithoutUserNestedInput
    history?: HistoryUpdateManyWithoutUserNestedInput
    comment?: CommentUpdateManyWithoutUserNestedInput
    downvote?: DownvoteUpdateManyWithoutUserNestedInput
    share?: ShareUpdateManyWithoutUserNestedInput
    followedBy?: FollowUpdateManyWithoutFollowingNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
  }

  export type UserUncheckedUpdateWithoutUpvoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    blog?: BlogUncheckedUpdateManyWithoutUserNestedInput
    history?: HistoryUncheckedUpdateManyWithoutUserNestedInput
    comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    downvote?: DownvoteUncheckedUpdateManyWithoutUserNestedInput
    share?: ShareUncheckedUpdateManyWithoutUserNestedInput
    followedBy?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
  }

  export type BlogUpsertWithoutUpvoteInput = {
    update: XOR<BlogUpdateWithoutUpvoteInput, BlogUncheckedUpdateWithoutUpvoteInput>
    create: XOR<BlogCreateWithoutUpvoteInput, BlogUncheckedCreateWithoutUpvoteInput>
  }

  export type BlogUpdateWithoutUpvoteInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tags?: BlogUpdatetagsInput | Enumerable<string>
    photo?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    upvoted?: BoolFieldUpdateOperationsInput | boolean
    downvoted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutBlogNestedInput
    downvote?: DownvoteUpdateManyWithoutBlogNestedInput
    share?: ShareUpdateManyWithoutBlogNestedInput
    comment?: CommentUpdateManyWithoutBlogNestedInput
    history?: HistoryUpdateManyWithoutBlogNestedInput
  }

  export type BlogUncheckedUpdateWithoutUpvoteInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tags?: BlogUpdatetagsInput | Enumerable<string>
    photo?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    upvoted?: BoolFieldUpdateOperationsInput | boolean
    downvoted?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    downvote?: DownvoteUncheckedUpdateManyWithoutBlogNestedInput
    share?: ShareUncheckedUpdateManyWithoutBlogNestedInput
    comment?: CommentUncheckedUpdateManyWithoutBlogNestedInput
    history?: HistoryUncheckedUpdateManyWithoutBlogNestedInput
  }

  export type UserCreateWithoutDownvoteInput = {
    id: string
    order?: number
    email?: string | null
    photo?: string | null
    name: string
    bio?: string | null
    blog?: BlogCreateNestedManyWithoutUserInput
    history?: HistoryCreateNestedManyWithoutUserInput
    comment?: CommentCreateNestedManyWithoutUserInput
    upvote?: UpvoteCreateNestedManyWithoutUserInput
    share?: ShareCreateNestedManyWithoutUserInput
    followedBy?: FollowCreateNestedManyWithoutFollowingInput
    following?: FollowCreateNestedManyWithoutFollowerInput
  }

  export type UserUncheckedCreateWithoutDownvoteInput = {
    id: string
    order?: number
    email?: string | null
    photo?: string | null
    name: string
    bio?: string | null
    blog?: BlogUncheckedCreateNestedManyWithoutUserInput
    history?: HistoryUncheckedCreateNestedManyWithoutUserInput
    comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    upvote?: UpvoteUncheckedCreateNestedManyWithoutUserInput
    share?: ShareUncheckedCreateNestedManyWithoutUserInput
    followedBy?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
  }

  export type UserCreateOrConnectWithoutDownvoteInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDownvoteInput, UserUncheckedCreateWithoutDownvoteInput>
  }

  export type BlogCreateWithoutDownvoteInput = {
    title: string
    content: string
    tags?: BlogCreatetagsInput | Enumerable<string>
    photo: string
    date?: Date | string
    upvoted?: boolean
    downvoted?: boolean
    user: UserCreateNestedOneWithoutBlogInput
    upvote?: UpvoteCreateNestedManyWithoutBlogInput
    share?: ShareCreateNestedManyWithoutBlogInput
    comment?: CommentCreateNestedManyWithoutBlogInput
    history?: HistoryCreateNestedManyWithoutBlogInput
  }

  export type BlogUncheckedCreateWithoutDownvoteInput = {
    id?: number
    title: string
    content: string
    tags?: BlogCreatetagsInput | Enumerable<string>
    photo: string
    date?: Date | string
    upvoted?: boolean
    downvoted?: boolean
    userId: string
    upvote?: UpvoteUncheckedCreateNestedManyWithoutBlogInput
    share?: ShareUncheckedCreateNestedManyWithoutBlogInput
    comment?: CommentUncheckedCreateNestedManyWithoutBlogInput
    history?: HistoryUncheckedCreateNestedManyWithoutBlogInput
  }

  export type BlogCreateOrConnectWithoutDownvoteInput = {
    where: BlogWhereUniqueInput
    create: XOR<BlogCreateWithoutDownvoteInput, BlogUncheckedCreateWithoutDownvoteInput>
  }

  export type UserUpsertWithoutDownvoteInput = {
    update: XOR<UserUpdateWithoutDownvoteInput, UserUncheckedUpdateWithoutDownvoteInput>
    create: XOR<UserCreateWithoutDownvoteInput, UserUncheckedCreateWithoutDownvoteInput>
  }

  export type UserUpdateWithoutDownvoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    blog?: BlogUpdateManyWithoutUserNestedInput
    history?: HistoryUpdateManyWithoutUserNestedInput
    comment?: CommentUpdateManyWithoutUserNestedInput
    upvote?: UpvoteUpdateManyWithoutUserNestedInput
    share?: ShareUpdateManyWithoutUserNestedInput
    followedBy?: FollowUpdateManyWithoutFollowingNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
  }

  export type UserUncheckedUpdateWithoutDownvoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    blog?: BlogUncheckedUpdateManyWithoutUserNestedInput
    history?: HistoryUncheckedUpdateManyWithoutUserNestedInput
    comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    upvote?: UpvoteUncheckedUpdateManyWithoutUserNestedInput
    share?: ShareUncheckedUpdateManyWithoutUserNestedInput
    followedBy?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
  }

  export type BlogUpsertWithoutDownvoteInput = {
    update: XOR<BlogUpdateWithoutDownvoteInput, BlogUncheckedUpdateWithoutDownvoteInput>
    create: XOR<BlogCreateWithoutDownvoteInput, BlogUncheckedCreateWithoutDownvoteInput>
  }

  export type BlogUpdateWithoutDownvoteInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tags?: BlogUpdatetagsInput | Enumerable<string>
    photo?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    upvoted?: BoolFieldUpdateOperationsInput | boolean
    downvoted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutBlogNestedInput
    upvote?: UpvoteUpdateManyWithoutBlogNestedInput
    share?: ShareUpdateManyWithoutBlogNestedInput
    comment?: CommentUpdateManyWithoutBlogNestedInput
    history?: HistoryUpdateManyWithoutBlogNestedInput
  }

  export type BlogUncheckedUpdateWithoutDownvoteInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tags?: BlogUpdatetagsInput | Enumerable<string>
    photo?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    upvoted?: BoolFieldUpdateOperationsInput | boolean
    downvoted?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    upvote?: UpvoteUncheckedUpdateManyWithoutBlogNestedInput
    share?: ShareUncheckedUpdateManyWithoutBlogNestedInput
    comment?: CommentUncheckedUpdateManyWithoutBlogNestedInput
    history?: HistoryUncheckedUpdateManyWithoutBlogNestedInput
  }

  export type UserCreateWithoutShareInput = {
    id: string
    order?: number
    email?: string | null
    photo?: string | null
    name: string
    bio?: string | null
    blog?: BlogCreateNestedManyWithoutUserInput
    history?: HistoryCreateNestedManyWithoutUserInput
    comment?: CommentCreateNestedManyWithoutUserInput
    upvote?: UpvoteCreateNestedManyWithoutUserInput
    downvote?: DownvoteCreateNestedManyWithoutUserInput
    followedBy?: FollowCreateNestedManyWithoutFollowingInput
    following?: FollowCreateNestedManyWithoutFollowerInput
  }

  export type UserUncheckedCreateWithoutShareInput = {
    id: string
    order?: number
    email?: string | null
    photo?: string | null
    name: string
    bio?: string | null
    blog?: BlogUncheckedCreateNestedManyWithoutUserInput
    history?: HistoryUncheckedCreateNestedManyWithoutUserInput
    comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    upvote?: UpvoteUncheckedCreateNestedManyWithoutUserInput
    downvote?: DownvoteUncheckedCreateNestedManyWithoutUserInput
    followedBy?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
  }

  export type UserCreateOrConnectWithoutShareInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutShareInput, UserUncheckedCreateWithoutShareInput>
  }

  export type BlogCreateWithoutShareInput = {
    title: string
    content: string
    tags?: BlogCreatetagsInput | Enumerable<string>
    photo: string
    date?: Date | string
    upvoted?: boolean
    downvoted?: boolean
    user: UserCreateNestedOneWithoutBlogInput
    upvote?: UpvoteCreateNestedManyWithoutBlogInput
    downvote?: DownvoteCreateNestedManyWithoutBlogInput
    comment?: CommentCreateNestedManyWithoutBlogInput
    history?: HistoryCreateNestedManyWithoutBlogInput
  }

  export type BlogUncheckedCreateWithoutShareInput = {
    id?: number
    title: string
    content: string
    tags?: BlogCreatetagsInput | Enumerable<string>
    photo: string
    date?: Date | string
    upvoted?: boolean
    downvoted?: boolean
    userId: string
    upvote?: UpvoteUncheckedCreateNestedManyWithoutBlogInput
    downvote?: DownvoteUncheckedCreateNestedManyWithoutBlogInput
    comment?: CommentUncheckedCreateNestedManyWithoutBlogInput
    history?: HistoryUncheckedCreateNestedManyWithoutBlogInput
  }

  export type BlogCreateOrConnectWithoutShareInput = {
    where: BlogWhereUniqueInput
    create: XOR<BlogCreateWithoutShareInput, BlogUncheckedCreateWithoutShareInput>
  }

  export type UserUpsertWithoutShareInput = {
    update: XOR<UserUpdateWithoutShareInput, UserUncheckedUpdateWithoutShareInput>
    create: XOR<UserCreateWithoutShareInput, UserUncheckedCreateWithoutShareInput>
  }

  export type UserUpdateWithoutShareInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    blog?: BlogUpdateManyWithoutUserNestedInput
    history?: HistoryUpdateManyWithoutUserNestedInput
    comment?: CommentUpdateManyWithoutUserNestedInput
    upvote?: UpvoteUpdateManyWithoutUserNestedInput
    downvote?: DownvoteUpdateManyWithoutUserNestedInput
    followedBy?: FollowUpdateManyWithoutFollowingNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
  }

  export type UserUncheckedUpdateWithoutShareInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    blog?: BlogUncheckedUpdateManyWithoutUserNestedInput
    history?: HistoryUncheckedUpdateManyWithoutUserNestedInput
    comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    upvote?: UpvoteUncheckedUpdateManyWithoutUserNestedInput
    downvote?: DownvoteUncheckedUpdateManyWithoutUserNestedInput
    followedBy?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
  }

  export type BlogUpsertWithoutShareInput = {
    update: XOR<BlogUpdateWithoutShareInput, BlogUncheckedUpdateWithoutShareInput>
    create: XOR<BlogCreateWithoutShareInput, BlogUncheckedCreateWithoutShareInput>
  }

  export type BlogUpdateWithoutShareInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tags?: BlogUpdatetagsInput | Enumerable<string>
    photo?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    upvoted?: BoolFieldUpdateOperationsInput | boolean
    downvoted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutBlogNestedInput
    upvote?: UpvoteUpdateManyWithoutBlogNestedInput
    downvote?: DownvoteUpdateManyWithoutBlogNestedInput
    comment?: CommentUpdateManyWithoutBlogNestedInput
    history?: HistoryUpdateManyWithoutBlogNestedInput
  }

  export type BlogUncheckedUpdateWithoutShareInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tags?: BlogUpdatetagsInput | Enumerable<string>
    photo?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    upvoted?: BoolFieldUpdateOperationsInput | boolean
    downvoted?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    upvote?: UpvoteUncheckedUpdateManyWithoutBlogNestedInput
    downvote?: DownvoteUncheckedUpdateManyWithoutBlogNestedInput
    comment?: CommentUncheckedUpdateManyWithoutBlogNestedInput
    history?: HistoryUncheckedUpdateManyWithoutBlogNestedInput
  }

  export type UserCreateWithoutCommentInput = {
    id: string
    order?: number
    email?: string | null
    photo?: string | null
    name: string
    bio?: string | null
    blog?: BlogCreateNestedManyWithoutUserInput
    history?: HistoryCreateNestedManyWithoutUserInput
    upvote?: UpvoteCreateNestedManyWithoutUserInput
    downvote?: DownvoteCreateNestedManyWithoutUserInput
    share?: ShareCreateNestedManyWithoutUserInput
    followedBy?: FollowCreateNestedManyWithoutFollowingInput
    following?: FollowCreateNestedManyWithoutFollowerInput
  }

  export type UserUncheckedCreateWithoutCommentInput = {
    id: string
    order?: number
    email?: string | null
    photo?: string | null
    name: string
    bio?: string | null
    blog?: BlogUncheckedCreateNestedManyWithoutUserInput
    history?: HistoryUncheckedCreateNestedManyWithoutUserInput
    upvote?: UpvoteUncheckedCreateNestedManyWithoutUserInput
    downvote?: DownvoteUncheckedCreateNestedManyWithoutUserInput
    share?: ShareUncheckedCreateNestedManyWithoutUserInput
    followedBy?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
  }

  export type UserCreateOrConnectWithoutCommentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentInput, UserUncheckedCreateWithoutCommentInput>
  }

  export type BlogCreateWithoutCommentInput = {
    title: string
    content: string
    tags?: BlogCreatetagsInput | Enumerable<string>
    photo: string
    date?: Date | string
    upvoted?: boolean
    downvoted?: boolean
    user: UserCreateNestedOneWithoutBlogInput
    upvote?: UpvoteCreateNestedManyWithoutBlogInput
    downvote?: DownvoteCreateNestedManyWithoutBlogInput
    share?: ShareCreateNestedManyWithoutBlogInput
    history?: HistoryCreateNestedManyWithoutBlogInput
  }

  export type BlogUncheckedCreateWithoutCommentInput = {
    id?: number
    title: string
    content: string
    tags?: BlogCreatetagsInput | Enumerable<string>
    photo: string
    date?: Date | string
    upvoted?: boolean
    downvoted?: boolean
    userId: string
    upvote?: UpvoteUncheckedCreateNestedManyWithoutBlogInput
    downvote?: DownvoteUncheckedCreateNestedManyWithoutBlogInput
    share?: ShareUncheckedCreateNestedManyWithoutBlogInput
    history?: HistoryUncheckedCreateNestedManyWithoutBlogInput
  }

  export type BlogCreateOrConnectWithoutCommentInput = {
    where: BlogWhereUniqueInput
    create: XOR<BlogCreateWithoutCommentInput, BlogUncheckedCreateWithoutCommentInput>
  }

  export type UserUpsertWithoutCommentInput = {
    update: XOR<UserUpdateWithoutCommentInput, UserUncheckedUpdateWithoutCommentInput>
    create: XOR<UserCreateWithoutCommentInput, UserUncheckedCreateWithoutCommentInput>
  }

  export type UserUpdateWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    blog?: BlogUpdateManyWithoutUserNestedInput
    history?: HistoryUpdateManyWithoutUserNestedInput
    upvote?: UpvoteUpdateManyWithoutUserNestedInput
    downvote?: DownvoteUpdateManyWithoutUserNestedInput
    share?: ShareUpdateManyWithoutUserNestedInput
    followedBy?: FollowUpdateManyWithoutFollowingNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    blog?: BlogUncheckedUpdateManyWithoutUserNestedInput
    history?: HistoryUncheckedUpdateManyWithoutUserNestedInput
    upvote?: UpvoteUncheckedUpdateManyWithoutUserNestedInput
    downvote?: DownvoteUncheckedUpdateManyWithoutUserNestedInput
    share?: ShareUncheckedUpdateManyWithoutUserNestedInput
    followedBy?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
  }

  export type BlogUpsertWithoutCommentInput = {
    update: XOR<BlogUpdateWithoutCommentInput, BlogUncheckedUpdateWithoutCommentInput>
    create: XOR<BlogCreateWithoutCommentInput, BlogUncheckedCreateWithoutCommentInput>
  }

  export type BlogUpdateWithoutCommentInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tags?: BlogUpdatetagsInput | Enumerable<string>
    photo?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    upvoted?: BoolFieldUpdateOperationsInput | boolean
    downvoted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutBlogNestedInput
    upvote?: UpvoteUpdateManyWithoutBlogNestedInput
    downvote?: DownvoteUpdateManyWithoutBlogNestedInput
    share?: ShareUpdateManyWithoutBlogNestedInput
    history?: HistoryUpdateManyWithoutBlogNestedInput
  }

  export type BlogUncheckedUpdateWithoutCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tags?: BlogUpdatetagsInput | Enumerable<string>
    photo?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    upvoted?: BoolFieldUpdateOperationsInput | boolean
    downvoted?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    upvote?: UpvoteUncheckedUpdateManyWithoutBlogNestedInput
    downvote?: DownvoteUncheckedUpdateManyWithoutBlogNestedInput
    share?: ShareUncheckedUpdateManyWithoutBlogNestedInput
    history?: HistoryUncheckedUpdateManyWithoutBlogNestedInput
  }

  export type UserCreateWithoutHistoryInput = {
    id: string
    order?: number
    email?: string | null
    photo?: string | null
    name: string
    bio?: string | null
    blog?: BlogCreateNestedManyWithoutUserInput
    comment?: CommentCreateNestedManyWithoutUserInput
    upvote?: UpvoteCreateNestedManyWithoutUserInput
    downvote?: DownvoteCreateNestedManyWithoutUserInput
    share?: ShareCreateNestedManyWithoutUserInput
    followedBy?: FollowCreateNestedManyWithoutFollowingInput
    following?: FollowCreateNestedManyWithoutFollowerInput
  }

  export type UserUncheckedCreateWithoutHistoryInput = {
    id: string
    order?: number
    email?: string | null
    photo?: string | null
    name: string
    bio?: string | null
    blog?: BlogUncheckedCreateNestedManyWithoutUserInput
    comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    upvote?: UpvoteUncheckedCreateNestedManyWithoutUserInput
    downvote?: DownvoteUncheckedCreateNestedManyWithoutUserInput
    share?: ShareUncheckedCreateNestedManyWithoutUserInput
    followedBy?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
  }

  export type UserCreateOrConnectWithoutHistoryInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutHistoryInput, UserUncheckedCreateWithoutHistoryInput>
  }

  export type BlogCreateWithoutHistoryInput = {
    title: string
    content: string
    tags?: BlogCreatetagsInput | Enumerable<string>
    photo: string
    date?: Date | string
    upvoted?: boolean
    downvoted?: boolean
    user: UserCreateNestedOneWithoutBlogInput
    upvote?: UpvoteCreateNestedManyWithoutBlogInput
    downvote?: DownvoteCreateNestedManyWithoutBlogInput
    share?: ShareCreateNestedManyWithoutBlogInput
    comment?: CommentCreateNestedManyWithoutBlogInput
  }

  export type BlogUncheckedCreateWithoutHistoryInput = {
    id?: number
    title: string
    content: string
    tags?: BlogCreatetagsInput | Enumerable<string>
    photo: string
    date?: Date | string
    upvoted?: boolean
    downvoted?: boolean
    userId: string
    upvote?: UpvoteUncheckedCreateNestedManyWithoutBlogInput
    downvote?: DownvoteUncheckedCreateNestedManyWithoutBlogInput
    share?: ShareUncheckedCreateNestedManyWithoutBlogInput
    comment?: CommentUncheckedCreateNestedManyWithoutBlogInput
  }

  export type BlogCreateOrConnectWithoutHistoryInput = {
    where: BlogWhereUniqueInput
    create: XOR<BlogCreateWithoutHistoryInput, BlogUncheckedCreateWithoutHistoryInput>
  }

  export type UserUpsertWithoutHistoryInput = {
    update: XOR<UserUpdateWithoutHistoryInput, UserUncheckedUpdateWithoutHistoryInput>
    create: XOR<UserCreateWithoutHistoryInput, UserUncheckedCreateWithoutHistoryInput>
  }

  export type UserUpdateWithoutHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    blog?: BlogUpdateManyWithoutUserNestedInput
    comment?: CommentUpdateManyWithoutUserNestedInput
    upvote?: UpvoteUpdateManyWithoutUserNestedInput
    downvote?: DownvoteUpdateManyWithoutUserNestedInput
    share?: ShareUpdateManyWithoutUserNestedInput
    followedBy?: FollowUpdateManyWithoutFollowingNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
  }

  export type UserUncheckedUpdateWithoutHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    blog?: BlogUncheckedUpdateManyWithoutUserNestedInput
    comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    upvote?: UpvoteUncheckedUpdateManyWithoutUserNestedInput
    downvote?: DownvoteUncheckedUpdateManyWithoutUserNestedInput
    share?: ShareUncheckedUpdateManyWithoutUserNestedInput
    followedBy?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
  }

  export type BlogUpsertWithoutHistoryInput = {
    update: XOR<BlogUpdateWithoutHistoryInput, BlogUncheckedUpdateWithoutHistoryInput>
    create: XOR<BlogCreateWithoutHistoryInput, BlogUncheckedCreateWithoutHistoryInput>
  }

  export type BlogUpdateWithoutHistoryInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tags?: BlogUpdatetagsInput | Enumerable<string>
    photo?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    upvoted?: BoolFieldUpdateOperationsInput | boolean
    downvoted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutBlogNestedInput
    upvote?: UpvoteUpdateManyWithoutBlogNestedInput
    downvote?: DownvoteUpdateManyWithoutBlogNestedInput
    share?: ShareUpdateManyWithoutBlogNestedInput
    comment?: CommentUpdateManyWithoutBlogNestedInput
  }

  export type BlogUncheckedUpdateWithoutHistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tags?: BlogUpdatetagsInput | Enumerable<string>
    photo?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    upvoted?: BoolFieldUpdateOperationsInput | boolean
    downvoted?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    upvote?: UpvoteUncheckedUpdateManyWithoutBlogNestedInput
    downvote?: DownvoteUncheckedUpdateManyWithoutBlogNestedInput
    share?: ShareUncheckedUpdateManyWithoutBlogNestedInput
    comment?: CommentUncheckedUpdateManyWithoutBlogNestedInput
  }

  export type UserCreateWithoutFollowingInput = {
    id: string
    order?: number
    email?: string | null
    photo?: string | null
    name: string
    bio?: string | null
    blog?: BlogCreateNestedManyWithoutUserInput
    history?: HistoryCreateNestedManyWithoutUserInput
    comment?: CommentCreateNestedManyWithoutUserInput
    upvote?: UpvoteCreateNestedManyWithoutUserInput
    downvote?: DownvoteCreateNestedManyWithoutUserInput
    share?: ShareCreateNestedManyWithoutUserInput
    followedBy?: FollowCreateNestedManyWithoutFollowingInput
  }

  export type UserUncheckedCreateWithoutFollowingInput = {
    id: string
    order?: number
    email?: string | null
    photo?: string | null
    name: string
    bio?: string | null
    blog?: BlogUncheckedCreateNestedManyWithoutUserInput
    history?: HistoryUncheckedCreateNestedManyWithoutUserInput
    comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    upvote?: UpvoteUncheckedCreateNestedManyWithoutUserInput
    downvote?: DownvoteUncheckedCreateNestedManyWithoutUserInput
    share?: ShareUncheckedCreateNestedManyWithoutUserInput
    followedBy?: FollowUncheckedCreateNestedManyWithoutFollowingInput
  }

  export type UserCreateOrConnectWithoutFollowingInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput>
  }

  export type UserCreateWithoutFollowedByInput = {
    id: string
    order?: number
    email?: string | null
    photo?: string | null
    name: string
    bio?: string | null
    blog?: BlogCreateNestedManyWithoutUserInput
    history?: HistoryCreateNestedManyWithoutUserInput
    comment?: CommentCreateNestedManyWithoutUserInput
    upvote?: UpvoteCreateNestedManyWithoutUserInput
    downvote?: DownvoteCreateNestedManyWithoutUserInput
    share?: ShareCreateNestedManyWithoutUserInput
    following?: FollowCreateNestedManyWithoutFollowerInput
  }

  export type UserUncheckedCreateWithoutFollowedByInput = {
    id: string
    order?: number
    email?: string | null
    photo?: string | null
    name: string
    bio?: string | null
    blog?: BlogUncheckedCreateNestedManyWithoutUserInput
    history?: HistoryUncheckedCreateNestedManyWithoutUserInput
    comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    upvote?: UpvoteUncheckedCreateNestedManyWithoutUserInput
    downvote?: DownvoteUncheckedCreateNestedManyWithoutUserInput
    share?: ShareUncheckedCreateNestedManyWithoutUserInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
  }

  export type UserCreateOrConnectWithoutFollowedByInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFollowedByInput, UserUncheckedCreateWithoutFollowedByInput>
  }

  export type UserUpsertWithoutFollowingInput = {
    update: XOR<UserUpdateWithoutFollowingInput, UserUncheckedUpdateWithoutFollowingInput>
    create: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput>
  }

  export type UserUpdateWithoutFollowingInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    blog?: BlogUpdateManyWithoutUserNestedInput
    history?: HistoryUpdateManyWithoutUserNestedInput
    comment?: CommentUpdateManyWithoutUserNestedInput
    upvote?: UpvoteUpdateManyWithoutUserNestedInput
    downvote?: DownvoteUpdateManyWithoutUserNestedInput
    share?: ShareUpdateManyWithoutUserNestedInput
    followedBy?: FollowUpdateManyWithoutFollowingNestedInput
  }

  export type UserUncheckedUpdateWithoutFollowingInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    blog?: BlogUncheckedUpdateManyWithoutUserNestedInput
    history?: HistoryUncheckedUpdateManyWithoutUserNestedInput
    comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    upvote?: UpvoteUncheckedUpdateManyWithoutUserNestedInput
    downvote?: DownvoteUncheckedUpdateManyWithoutUserNestedInput
    share?: ShareUncheckedUpdateManyWithoutUserNestedInput
    followedBy?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
  }

  export type UserUpsertWithoutFollowedByInput = {
    update: XOR<UserUpdateWithoutFollowedByInput, UserUncheckedUpdateWithoutFollowedByInput>
    create: XOR<UserCreateWithoutFollowedByInput, UserUncheckedCreateWithoutFollowedByInput>
  }

  export type UserUpdateWithoutFollowedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    blog?: BlogUpdateManyWithoutUserNestedInput
    history?: HistoryUpdateManyWithoutUserNestedInput
    comment?: CommentUpdateManyWithoutUserNestedInput
    upvote?: UpvoteUpdateManyWithoutUserNestedInput
    downvote?: DownvoteUpdateManyWithoutUserNestedInput
    share?: ShareUpdateManyWithoutUserNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
  }

  export type UserUncheckedUpdateWithoutFollowedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    blog?: BlogUncheckedUpdateManyWithoutUserNestedInput
    history?: HistoryUncheckedUpdateManyWithoutUserNestedInput
    comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    upvote?: UpvoteUncheckedUpdateManyWithoutUserNestedInput
    downvote?: DownvoteUncheckedUpdateManyWithoutUserNestedInput
    share?: ShareUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
  }

  export type BlogCreateManyUserInput = {
    id?: number
    title: string
    content: string
    tags?: BlogCreatetagsInput | Enumerable<string>
    photo: string
    date?: Date | string
    upvoted?: boolean
    downvoted?: boolean
  }

  export type HistoryCreateManyUserInput = {
    date?: Date | string
    blogId: number
  }

  export type CommentCreateManyUserInput = {
    id?: number
    content: string
    date?: Date | string
    liked?: boolean
    like_count?: number
    blogId: number
  }

  export type UpvoteCreateManyUserInput = {
    blogId: number
  }

  export type DownvoteCreateManyUserInput = {
    blogId: number
  }

  export type ShareCreateManyUserInput = {
    blogId: number
  }

  export type FollowCreateManyFollowingInput = {
    followerId: string
  }

  export type FollowCreateManyFollowerInput = {
    followingId: string
  }

  export type BlogUpdateWithoutUserInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tags?: BlogUpdatetagsInput | Enumerable<string>
    photo?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    upvoted?: BoolFieldUpdateOperationsInput | boolean
    downvoted?: BoolFieldUpdateOperationsInput | boolean
    upvote?: UpvoteUpdateManyWithoutBlogNestedInput
    downvote?: DownvoteUpdateManyWithoutBlogNestedInput
    share?: ShareUpdateManyWithoutBlogNestedInput
    comment?: CommentUpdateManyWithoutBlogNestedInput
    history?: HistoryUpdateManyWithoutBlogNestedInput
  }

  export type BlogUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tags?: BlogUpdatetagsInput | Enumerable<string>
    photo?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    upvoted?: BoolFieldUpdateOperationsInput | boolean
    downvoted?: BoolFieldUpdateOperationsInput | boolean
    upvote?: UpvoteUncheckedUpdateManyWithoutBlogNestedInput
    downvote?: DownvoteUncheckedUpdateManyWithoutBlogNestedInput
    share?: ShareUncheckedUpdateManyWithoutBlogNestedInput
    comment?: CommentUncheckedUpdateManyWithoutBlogNestedInput
    history?: HistoryUncheckedUpdateManyWithoutBlogNestedInput
  }

  export type BlogUncheckedUpdateManyWithoutBlogInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tags?: BlogUpdatetagsInput | Enumerable<string>
    photo?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    upvoted?: BoolFieldUpdateOperationsInput | boolean
    downvoted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type HistoryUpdateWithoutUserInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    blog?: BlogUpdateOneRequiredWithoutHistoryNestedInput
  }

  export type HistoryUncheckedUpdateWithoutUserInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    blogId?: IntFieldUpdateOperationsInput | number
  }

  export type HistoryUncheckedUpdateManyWithoutHistoryInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    blogId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentUpdateWithoutUserInput = {
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    liked?: BoolFieldUpdateOperationsInput | boolean
    like_count?: IntFieldUpdateOperationsInput | number
    blog?: BlogUpdateOneRequiredWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    liked?: BoolFieldUpdateOperationsInput | boolean
    like_count?: IntFieldUpdateOperationsInput | number
    blogId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentUncheckedUpdateManyWithoutCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    liked?: BoolFieldUpdateOperationsInput | boolean
    like_count?: IntFieldUpdateOperationsInput | number
    blogId?: IntFieldUpdateOperationsInput | number
  }

  export type UpvoteUpdateWithoutUserInput = {
    blog?: BlogUpdateOneRequiredWithoutUpvoteNestedInput
  }

  export type UpvoteUncheckedUpdateWithoutUserInput = {
    blogId?: IntFieldUpdateOperationsInput | number
  }

  export type UpvoteUncheckedUpdateManyWithoutUpvoteInput = {
    blogId?: IntFieldUpdateOperationsInput | number
  }

  export type DownvoteUpdateWithoutUserInput = {
    blog?: BlogUpdateOneRequiredWithoutDownvoteNestedInput
  }

  export type DownvoteUncheckedUpdateWithoutUserInput = {
    blogId?: IntFieldUpdateOperationsInput | number
  }

  export type DownvoteUncheckedUpdateManyWithoutDownvoteInput = {
    blogId?: IntFieldUpdateOperationsInput | number
  }

  export type ShareUpdateWithoutUserInput = {
    blog?: BlogUpdateOneRequiredWithoutShareNestedInput
  }

  export type ShareUncheckedUpdateWithoutUserInput = {
    blogId?: IntFieldUpdateOperationsInput | number
  }

  export type ShareUncheckedUpdateManyWithoutShareInput = {
    blogId?: IntFieldUpdateOperationsInput | number
  }

  export type FollowUpdateWithoutFollowingInput = {
    follower?: UserUpdateOneRequiredWithoutFollowingNestedInput
  }

  export type FollowUncheckedUpdateWithoutFollowingInput = {
    followerId?: StringFieldUpdateOperationsInput | string
  }

  export type FollowUncheckedUpdateManyWithoutFollowedByInput = {
    followerId?: StringFieldUpdateOperationsInput | string
  }

  export type FollowUpdateWithoutFollowerInput = {
    following?: UserUpdateOneRequiredWithoutFollowedByNestedInput
  }

  export type FollowUncheckedUpdateWithoutFollowerInput = {
    followingId?: StringFieldUpdateOperationsInput | string
  }

  export type FollowUncheckedUpdateManyWithoutFollowingInput = {
    followingId?: StringFieldUpdateOperationsInput | string
  }

  export type UpvoteCreateManyBlogInput = {
    userId: string
  }

  export type DownvoteCreateManyBlogInput = {
    userId: string
  }

  export type ShareCreateManyBlogInput = {
    userId: string
  }

  export type CommentCreateManyBlogInput = {
    id?: number
    content: string
    date?: Date | string
    liked?: boolean
    like_count?: number
    userId: string
  }

  export type HistoryCreateManyBlogInput = {
    date?: Date | string
    userId: string
  }

  export type UpvoteUpdateWithoutBlogInput = {
    user?: UserUpdateOneRequiredWithoutUpvoteNestedInput
  }

  export type UpvoteUncheckedUpdateWithoutBlogInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type DownvoteUpdateWithoutBlogInput = {
    user?: UserUpdateOneRequiredWithoutDownvoteNestedInput
  }

  export type DownvoteUncheckedUpdateWithoutBlogInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ShareUpdateWithoutBlogInput = {
    user?: UserUpdateOneRequiredWithoutShareNestedInput
  }

  export type ShareUncheckedUpdateWithoutBlogInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUpdateWithoutBlogInput = {
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    liked?: BoolFieldUpdateOperationsInput | boolean
    like_count?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutBlogInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    liked?: BoolFieldUpdateOperationsInput | boolean
    like_count?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type HistoryUpdateWithoutBlogInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutHistoryNestedInput
  }

  export type HistoryUncheckedUpdateWithoutBlogInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}